

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Dec 29 15:34:43 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F1933
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text600,local,class=CODE,delta=2
    18                           	psect	text602,local,class=CODE,delta=2
    19                           	psect	text603,local,class=CODE,delta=2
    20                           	psect	text604,local,class=CODE,delta=2
    21                           	psect	text605,local,class=CODE,delta=2
    22                           	psect	text606,local,class=CODE,delta=2
    23                           	psect	text607,local,class=CODE,delta=2
    24                           	psect	text608,local,class=CODE,delta=2
    25                           	psect	text609,local,class=CODE,delta=2
    26                           	psect	text610,local,class=CODE,delta=2
    27                           	psect	text611,local,class=CODE,delta=2
    28                           	psect	text616,local,class=CODE,delta=2
    29                           	psect	text617,local,class=CODE,delta=2
    30                           	psect	functab,global,reloc=256,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;#
    34  0001                     	;#
    35  0002                     	;#
    36  0003                     	;#
    37  0004                     	;#
    38  0005                     	;#
    39  0006                     	;#
    40  0007                     	;#
    41  0008                     	;#
    42  0009                     	;#
    43  000A                     	;#
    44  000B                     	;#
    45  000C                     	;#
    46  000D                     	;#
    47  000E                     	;#
    48  0010                     	;#
    49  0011                     	;#
    50  0012                     	;#
    51  0013                     	;#
    52  0015                     	;#
    53  0016                     	;#
    54  0017                     	;#
    55  0018                     	;#
    56  0019                     	;#
    57  001A                     	;#
    58  001B                     	;#
    59  001C                     	;#
    60  001E                     	;#
    61  001F                     	;#
    62  008C                     	;#
    63  008D                     	;#
    64  008E                     	;#
    65  0090                     	;#
    66  0091                     	;#
    67  0092                     	;#
    68  0093                     	;#
    69  0095                     	;#
    70  0096                     	;#
    71  0097                     	;#
    72  0098                     	;#
    73  0099                     	;#
    74  009A                     	;#
    75  009B                     	;#
    76  009C                     	;#
    77  009D                     	;#
    78  009E                     	;#
    79  010C                     	;#
    80  010D                     	;#
    81  010E                     	;#
    82  0110                     	;#
    83  0111                     	;#
    84  0112                     	;#
    85  0113                     	;#
    86  0114                     	;#
    87  0115                     	;#
    88  0116                     	;#
    89  0117                     	;#
    90  0118                     	;#
    91  0119                     	;#
    92  011A                     	;#
    93  011B                     	;#
    94  011D                     	;#
    95  018C                     	;#
    96  018D                     	;#
    97  0191                     	;#
    98  0192                     	;#
    99  0193                     	;#
   100  0193                     	;#
   101  0194                     	;#
   102  0195                     	;#
   103  0196                     	;#
   104  0199                     	;#
   105  019A                     	;#
   106  019B                     	;#
   107  019B                     	;#
   108  019C                     	;#
   109  019D                     	;#
   110  019E                     	;#
   111  019F                     	;#
   112  020D                     	;#
   113  0210                     	;#
   114  0211                     	;#
   115  0212                     	;#
   116  0213                     	;#
   117  0214                     	;#
   118  0215                     	;#
   119  0215                     	;#
   120  0216                     	;#
   121  0217                     	;#
   122  0291                     	;#
   123  0292                     	;#
   124  0293                     	;#
   125  0294                     	;#
   126  0295                     	;#
   127  0295                     	;#
   128  0296                     	;#
   129  0298                     	;#
   130  0299                     	;#
   131  029A                     	;#
   132  029B                     	;#
   133  029C                     	;#
   134  029C                     	;#
   135  029D                     	;#
   136  029E                     	;#
   137  029F                     	;#
   138  0311                     	;#
   139  0312                     	;#
   140  0313                     	;#
   141  0314                     	;#
   142  0315                     	;#
   143  0315                     	;#
   144  0316                     	;#
   145  0318                     	;#
   146  0319                     	;#
   147  031A                     	;#
   148  031C                     	;#
   149  031D                     	;#
   150  031E                     	;#
   151  0394                     	;#
   152  0395                     	;#
   153  0396                     	;#
   154  0415                     	;#
   155  0416                     	;#
   156  0417                     	;#
   157  041C                     	;#
   158  041D                     	;#
   159  041E                     	;#
   160  0791                     	;#
   161  0792                     	;#
   162  0793                     	;#
   163  0794                     	;#
   164  0795                     	;#
   165  0798                     	;#
   166  0799                     	;#
   167  07A0                     	;#
   168  07A1                     	;#
   169  07A3                     	;#
   170  07A4                     	;#
   171  07A6                     	;#
   172  07A7                     	;#
   173  07A9                     	;#
   174  07AA                     	;#
   175  0FE4                     	;#
   176  0FE5                     	;#
   177  0FE6                     	;#
   178  0FE7                     	;#
   179  0FE8                     	;#
   180  0FE9                     	;#
   181  0FEA                     	;#
   182  0FEB                     	;#
   183  0FED                     	;#
   184  0FEE                     	;#
   185  0FEF                     	;#
   186                           
   187                           	psect	config
   188  8007  C80C               	dw	51212	;#
   189  8008  DBFF               	dw	56319	;#
   190                           
   191                           	psect	idataBANK0
   192  0000                     __pidataBANK0:	
   193                           
   194                           	psect	strings
   195  006F                     __pstrings:	
   196  006F                     __stringtab:	
   197  006F  3400               	retlw	0
   198  0070                     _mTouch_pressThreshold:	
   199  0070  342C               	retlw	44
   200  0071  3401               	retlw	1
   201  0072  342C               	retlw	44
   202  0073  3401               	retlw	1
   203  0074  342C               	retlw	44
   204  0075  3401               	retlw	1
   205  0076  342C               	retlw	44
   206  0077  3401               	retlw	1
   207  0078  342C               	retlw	44
   208  0079  3401               	retlw	1
   209  007A                     _mTouch_releaseThreshold:	
   210  007A  34B4               	retlw	180
   211  007B  3400               	retlw	0
   212  007C  34B4               	retlw	180
   213  007D  3400               	retlw	0
   214  007E  34B4               	retlw	180
   215  007F  3400               	retlw	0
   216  0080  34B4               	retlw	180
   217  0081  3400               	retlw	0
   218  0082  34B4               	retlw	180
   219  0083  3400               	retlw	0
   220  0084                     _mTouch_ScanA:	
   221  0084  3403               	retlw	(fp__mTouch_ScanA_0-i1fpbase)& (0+255)
   222  0085  3405               	retlw	(fp__mTouch_ScanA_1-i1fpbase)& (0+255)
   223  0086  3407               	retlw	(fp__mTouch_ScanA_2-i1fpbase)& (0+255)
   224  0087  3409               	retlw	(fp__mTouch_ScanA_3-i1fpbase)& (0+255)
   225  0088  3401               	retlw	(fp__mTouch_ScanA_4-i1fpbase)& (0+255)
   226  0089                     _mTouch_ScanB:	
   227  0089  340D               	retlw	(fp__mTouch_ScanB_0-i1fpbase)& (0+255)
   228  008A  340F               	retlw	(fp__mTouch_ScanB_1-i1fpbase)& (0+255)
   229  008B  3411               	retlw	(fp__mTouch_ScanB_2-i1fpbase)& (0+255)
   230  008C  3413               	retlw	(fp__mTouch_ScanB_3-i1fpbase)& (0+255)
   231  008D  340B               	retlw	(fp__mTouch_ScanB_4-i1fpbase)& (0+255)
   232  000B                     _INTCONbits	set	11
   233  000C                     _PORTA	set	12
   234  000D                     _PORTB	set	13
   235  000E                     _PORTC	set	14
   236  0010                     _PORTE	set	16
   237  001C                     _T2CON	set	28
   238  005A                     _T0IF	set	90
   239  005D                     _TMR0IE	set	93
   240  005A                     _TMR0IF	set	90
   241  0089                     _TMR2IF	set	137
   242  009E                     _ADCON1bits	set	158
   243  009C                     _ADRESH	set	156
   244  009B                     _ADRESL	set	155
   245  0095                     _OPTION_REG	set	149
   246  0099                     _OSCCON	set	153
   247  008C                     _TRISA	set	140
   248  008D                     _TRISB	set	141
   249  008E                     _TRISC	set	142
   250  0090                     _TRISE	set	144
   251  04E9                     _GO_nDONE	set	1257
   252  0489                     _TMR2IE	set	1161
   253  0866                     _LATA6	set	2150
   254  0867                     _LATA7	set	2151
   255  086F                     _LATB7	set	2159
   256  0870                     _LATC0	set	2160
   257  0871                     _LATC1	set	2161
   258  0872                     _LATC2	set	2162
   259  0873                     _LATC3	set	2163
   260  0874                     _LATC4	set	2164
   261  0875                     _LATC5	set	2165
   262  0876                     _LATC6	set	2166
   263  018C                     _ANSELA	set	396
   264  018D                     _ANSELB	set	397
   265                           
   266                           	psect	cinit
   267  0118                     start_initialization:	
   268  0118  3020               	movlw	low __pbssBANK0
   269                           
   270                           ; Clear objects allocated to BITCOMMON
   271  0119  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   272                           
   273                           ; Clear objects allocated to COMMON
   274  011A  01FB               	clrf	__pbssCOMMON& (0+127)
   275  011B  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   276  011C  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   277                           
   278                           ; Clear objects allocated to BANK0
   279  011D  0084               	movwf	4
   280  011E  3000               	movlw	high __pbssBANK0
   281  011F  0085               	movwf	5
   282  0120  302F               	movlw	47
   283  0121  3187  273F  3181   	fcall	clear_ram
   284                           
   285                           ; Clear objects allocated to BANK1
   286  0124  30A0               	movlw	low __pbssBANK1
   287  0125  0084               	movwf	4
   288  0126  3000               	movlw	high __pbssBANK1
   289  0127  0085               	movwf	5
   290  0128  302E               	movlw	46
   291  0129  3187  273F  3181   	fcall	clear_ram
   292                           
   293                           ;initializer for _mTouch_jitter
   294  012C  3055               	movlw	85
   295  012D  00DC               	movwf	__pdataBANK0& (0+127)
   296  012E                     end_of_initialization:	
   297                           ;End of C runtime variable initialization code
   298                           
   299  012E  0020               	movlb	0
   300  012F  2930               	ljmp	_main	;jump to C main() function
   301  0130                     __pmaintext:	
   302 ;;Data sizes: Strings 0, constant 30, data 1, bss 96, persistent 0 stack 0
   303 ;;Auto spaces:   Size  Autos    Used
   304 ;; COMMON          14     10      14
   305 ;; BANK0           80     13      61
   306 ;; BANK1           80      0      46
   307 ;; BANK2           80      0       0
   308 ;;
   309 ;; Pointer list with targets:
   310 ;; mTouch_currentAcqData	PTR struct . size(1) Largest target is 20
   311 ;;		 -> NULL(NULL[0]), mTouch_acqData(BANK1[20]), 
   312 ;;
   313 ;; mTouch_ScanB	const PTR FTN()void [5] size(1) Largest target is 0
   314 ;;		 -> mTouch_ScanB_4(), mTouch_ScanB_3(), mTouch_ScanB_2(), mTouch_ScanB_1(), 
   315 ;;		 -> mTouch_ScanB_0(), 
   316 ;;
   317 ;; mTouch_ScanA	const PTR FTN()void [5] size(1) Largest target is 0
   318 ;;		 -> mTouch_ScanA_4(), mTouch_ScanA_3(), mTouch_ScanA_2(), mTouch_ScanA_1(), 
   319 ;;		 -> mTouch_ScanA_0(), 
   320 ;;
   321 ;; mTouch_ButtonStateMachine@sensor	PTR struct . size(1) Largest target is 26
   322 ;;		 -> mTouch_stateVars(BANK1[26]), 
   323 ;;
   324 ;; mTouch_Init@acqData	PTR struct . size(1) Largest target is 20
   325 ;;		 -> mTouch_acqData(BANK1[20]), 
   326 ;;
   327 ;;
   328 ;; Critical Paths under _main in COMMON
   329 ;;
   330 ;;   None.
   331 ;;
   332 ;; Critical Paths under _ISR in COMMON
   333 ;;
   334 ;;   _ISR->_mTouch_Scan
   335 ;;   _mTouch_Scan->_mTouch_DecimationFilter
   336 ;;
   337 ;; Critical Paths under _main in BANK0
   338 ;;
   339 ;;   _mTouch_Decode->_mTouch_UpdateBaseline
   340 ;;   _mTouch_UpdateBaseline->___bmul
   341 ;;   _mTouch_ButtonStateMachine->___bmul
   342 ;;   _mTouch_Init->___bmul
   343 ;;
   344 ;; Critical Paths under _ISR in BANK0
   345 ;;
   346 ;;   None.
   347 ;;
   348 ;; Critical Paths under _main in BANK1
   349 ;;
   350 ;;   None.
   351 ;;
   352 ;; Critical Paths under _ISR in BANK1
   353 ;;
   354 ;;   None.
   355 ;;
   356 ;; Critical Paths under _main in BANK2
   357 ;;
   358 ;;   None.
   359 ;;
   360 ;; Critical Paths under _ISR in BANK2
   361 ;;
   362 ;;   None.
   363 ;;
   364 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   365 ;;
   366 ;;
   367 ;;Call Graph Tables:
   368 ;;
   369 ;; ---------------------------------------------------------------------------------
   370 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   371 ;; ---------------------------------------------------------------------------------
   372 ;; (0) _main                                                 1     1      0    1075
   373 ;;                                             12 BANK0      1     1      0
   374 ;;                _Example_System_Init
   375 ;;                        _mTouch_Init
   376 ;;                      _mTouch_Decode
   377 ;;                         _KeyExecute
   378 ;; ---------------------------------------------------------------------------------
   379 ;; (1) _mTouch_Decode                                        0     0      0     738
   380 ;;          _mTouch_ButtonStateMachine
   381 ;;              _mTouch_UpdateBaseline
   382 ;;                  _mTouch_ChangeMode
   383 ;; ---------------------------------------------------------------------------------
   384 ;; (2) _mTouch_UpdateBaseline                                9     9      0     159
   385 ;;                                              3 BANK0      9     9      0
   386 ;;                             ___bmul
   387 ;; ---------------------------------------------------------------------------------
   388 ;; (2) _mTouch_ButtonStateMachine                            5     5      0     579
   389 ;;                                              3 BANK0      5     5      0
   390 ;;                             ___bmul
   391 ;; ---------------------------------------------------------------------------------
   392 ;; (1) _mTouch_Init                                          2     2      0     337
   393 ;;                                              3 BANK0      2     2      0
   394 ;;                             ___bmul
   395 ;;                  _mTouch_ChangeMode
   396 ;; ---------------------------------------------------------------------------------
   397 ;; (3) ___bmul                                               3     2      1      92
   398 ;;                                              0 BANK0      3     2      1
   399 ;; ---------------------------------------------------------------------------------
   400 ;; (1) _Example_System_Init                                  0     0      0       0
   401 ;; ---------------------------------------------------------------------------------
   402 ;; (2) _mTouch_ChangeMode                                    0     0      0       0
   403 ;; ---------------------------------------------------------------------------------
   404 ;; (1) _KeyExecute                                           2     2      0       0
   405 ;;                                              0 BANK0      2     2      0
   406 ;; ---------------------------------------------------------------------------------
   407 ;; Estimated maximum stack depth 3
   408 ;; ---------------------------------------------------------------------------------
   409 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   410 ;; ---------------------------------------------------------------------------------
   411 ;; (4) _ISR                                                  1     1      0      94
   412 ;;                                              9 COMMON     1     1      0
   413 ;;                            _IchLeds
   414 ;;                         _IchOutputs
   415 ;;                        _mTouch_Scan
   416 ;; ---------------------------------------------------------------------------------
   417 ;; (5) _mTouch_Scan                                          2     2      0      94
   418 ;;                                              7 COMMON     2     2      0
   419 ;;                     _mTouch_ScanA_4
   420 ;;                     _mTouch_ScanA_3
   421 ;;                     _mTouch_ScanA_2
   422 ;;                     _mTouch_ScanA_1
   423 ;;                     _mTouch_ScanA_0
   424 ;;               _mTouch_WaitForGoDone
   425 ;;                  _mTouch_StoreScanA
   426 ;;                     _mTouch_ScanB_4
   427 ;;                     _mTouch_ScanB_3
   428 ;;                     _mTouch_ScanB_2
   429 ;;                     _mTouch_ScanB_1
   430 ;;                     _mTouch_ScanB_0
   431 ;;                  _mTouch_StoreScanB
   432 ;;            _mTouch_DecimationFilter
   433 ;;                i1_mTouch_ChangeMode
   434 ;; ---------------------------------------------------------------------------------
   435 ;; (6) i1_mTouch_ChangeMode                                  0     0      0       0
   436 ;; ---------------------------------------------------------------------------------
   437 ;; (6) _mTouch_ScanB_4                                       0     0      0       0
   438 ;; ---------------------------------------------------------------------------------
   439 ;; (6) _mTouch_ScanA_4                                       0     0      0       0
   440 ;; ---------------------------------------------------------------------------------
   441 ;; (6) _mTouch_ScanB_3                                       0     0      0       0
   442 ;; ---------------------------------------------------------------------------------
   443 ;; (6) _mTouch_ScanA_3                                       0     0      0       0
   444 ;; ---------------------------------------------------------------------------------
   445 ;; (6) _mTouch_ScanB_2                                       0     0      0       0
   446 ;; ---------------------------------------------------------------------------------
   447 ;; (6) _mTouch_ScanA_2                                       0     0      0       0
   448 ;; ---------------------------------------------------------------------------------
   449 ;; (6) _mTouch_ScanB_1                                       0     0      0       0
   450 ;; ---------------------------------------------------------------------------------
   451 ;; (6) _mTouch_ScanA_1                                       0     0      0       0
   452 ;; ---------------------------------------------------------------------------------
   453 ;; (6) _mTouch_ScanB_0                                       0     0      0       0
   454 ;; ---------------------------------------------------------------------------------
   455 ;; (6) _mTouch_ScanA_0                                       0     0      0       0
   456 ;; ---------------------------------------------------------------------------------
   457 ;; (6) _mTouch_DecimationFilter                              7     7      0      94
   458 ;;                                              0 COMMON     7     7      0
   459 ;; ---------------------------------------------------------------------------------
   460 ;; (6) _mTouch_StoreScanB                                    1     1      0       0
   461 ;;                                              0 COMMON     1     1      0
   462 ;; ---------------------------------------------------------------------------------
   463 ;; (6) _mTouch_StoreScanA                                    0     0      0       0
   464 ;; ---------------------------------------------------------------------------------
   465 ;; (6) _mTouch_WaitForGoDone                                 0     0      0       0
   466 ;; ---------------------------------------------------------------------------------
   467 ;; (5) _IchLeds                                              0     0      0       0
   468 ;; ---------------------------------------------------------------------------------
   469 ;; (5) _IchOutputs                                           0     0      0       0
   470 ;; ---------------------------------------------------------------------------------
   471 ;; Estimated maximum stack depth 6
   472 ;; ---------------------------------------------------------------------------------
   473 ;; Call Graph Graphs:
   474 ;; _main (ROOT)
   475 ;;   _Example_System_Init
   476 ;;   _mTouch_Init
   477 ;;     ___bmul
   478 ;;     _mTouch_ChangeMode
   479 ;;   _mTouch_Decode
   480 ;;     _mTouch_ButtonStateMachine
   481 ;;       ___bmul
   482 ;;     _mTouch_UpdateBaseline
   483 ;;       ___bmul
   484 ;;     _mTouch_ChangeMode
   485 ;;   _KeyExecute
   486 ;;
   487 ;; _ISR (ROOT)
   488 ;;   _IchLeds
   489 ;;   _IchOutputs
   490 ;;   _mTouch_Scan
   491 ;;     _mTouch_ScanA_4
   492 ;;     _mTouch_ScanA_3
   493 ;;     _mTouch_ScanA_2
   494 ;;     _mTouch_ScanA_1
   495 ;;     _mTouch_ScanA_0
   496 ;;     _mTouch_WaitForGoDone
   497 ;;     _mTouch_StoreScanA
   498 ;;     _mTouch_ScanB_4
   499 ;;     _mTouch_ScanB_3
   500 ;;     _mTouch_ScanB_2
   501 ;;     _mTouch_ScanB_1
   502 ;;     _mTouch_ScanB_0
   503 ;;     _mTouch_StoreScanB
   504 ;;     _mTouch_DecimationFilter
   505 ;;     i1_mTouch_ChangeMode
   506 ;;
   507 ;; Address spaces:
   508 ;;Name               Size   Autos  Total    Cost      Usage
   509 ;;BIGRAM              F0      0       0       0        0.0%
   510 ;;EEDATA             100      0       0       0        0.0%
   511 ;;NULL                 0      0       0       0        0.0%
   512 ;;CODE                 0      0       0       0        0.0%
   513 ;;BITCOMMON            E      0       1       1        7.1%
   514 ;;BITSFR0              0      0       0       1        0.0%
   515 ;;SFR0                 0      0       0       1        0.0%
   516 ;;COMMON               E      A       E       2      100.0%
   517 ;;BITSFR1              0      0       0       2        0.0%
   518 ;;SFR1                 0      0       0       2        0.0%
   519 ;;BITSFR2              0      0       0       3        0.0%
   520 ;;SFR2                 0      0       0       3        0.0%
   521 ;;STACK                0      0       9       3        0.0%
   522 ;;BITSFR3              0      0       0       4        0.0%
   523 ;;SFR3                 0      0       0       4        0.0%
   524 ;;ABS                  0      0      79       4        0.0%
   525 ;;BITBANK0            50      0       0       5        0.0%
   526 ;;BITSFR4              0      0       0       5        0.0%
   527 ;;SFR4                 0      0       0       5        0.0%
   528 ;;BANK0               50      D      3D       6       76.3%
   529 ;;BITSFR5              0      0       0       6        0.0%
   530 ;;SFR5                 0      0       0       6        0.0%
   531 ;;BITBANK1            50      0       0       7        0.0%
   532 ;;BITSFR6              0      0       0       7        0.0%
   533 ;;SFR6                 0      0       0       7        0.0%
   534 ;;BANK1               50      0      2E       8       57.5%
   535 ;;BITSFR7              0      0       0       8        0.0%
   536 ;;SFR7                 0      0       0       8        0.0%
   537 ;;BITBANK2            50      0       0       9        0.0%
   538 ;;BITSFR8              0      0       0       9        0.0%
   539 ;;SFR8                 0      0       0       9        0.0%
   540 ;;BANK2               50      0       0      10        0.0%
   541 ;;BITSFR9              0      0       0      10        0.0%
   542 ;;SFR9                 0      0       0      10        0.0%
   543 ;;BITSFR10             0      0       0      11        0.0%
   544 ;;SFR10                0      0       0      11        0.0%
   545 ;;DATA                 0      0      82      11        0.0%
   546 ;;BITSFR11             0      0       0      12        0.0%
   547 ;;SFR11                0      0       0      12        0.0%
   548 ;;BITSFR12             0      0       0      13        0.0%
   549 ;;SFR12                0      0       0      13        0.0%
   550 ;;BITSFR13             0      0       0      14        0.0%
   551 ;;SFR13                0      0       0      14        0.0%
   552 ;;BITSFR14             0      0       0      15        0.0%
   553 ;;SFR14                0      0       0      15        0.0%
   554 ;;BITSFR15             0      0       0      16        0.0%
   555 ;;SFR15                0      0       0      16        0.0%
   556 ;;BITSFR16             0      0       0      17        0.0%
   557 ;;SFR16                0      0       0      17        0.0%
   558 ;;BITSFR17             0      0       0      18        0.0%
   559 ;;SFR17                0      0       0      18        0.0%
   560 ;;BITSFR18             0      0       0      19        0.0%
   561 ;;SFR18                0      0       0      19        0.0%
   562 ;;BITSFR19             0      0       0      20        0.0%
   563 ;;SFR19                0      0       0      20        0.0%
   564 ;;BITSFR20             0      0       0      21        0.0%
   565 ;;SFR20                0      0       0      21        0.0%
   566 ;;BITSFR21             0      0       0      22        0.0%
   567 ;;SFR21                0      0       0      22        0.0%
   568 ;;BITSFR22             0      0       0      23        0.0%
   569 ;;SFR22                0      0       0      23        0.0%
   570 ;;BITSFR23             0      0       0      24        0.0%
   571 ;;SFR23                0      0       0      24        0.0%
   572 ;;BITSFR24             0      0       0      25        0.0%
   573 ;;SFR24                0      0       0      25        0.0%
   574 ;;BITSFR25             0      0       0      26        0.0%
   575 ;;SFR25                0      0       0      26        0.0%
   576 ;;BITSFR26             0      0       0      27        0.0%
   577 ;;SFR26                0      0       0      27        0.0%
   578 ;;BITSFR27             0      0       0      28        0.0%
   579 ;;SFR27                0      0       0      28        0.0%
   580 ;;BITSFR28             0      0       0      29        0.0%
   581 ;;SFR28                0      0       0      29        0.0%
   582 ;;BITSFR29             0      0       0      30        0.0%
   583 ;;SFR29                0      0       0      30        0.0%
   584 ;;BITSFR30             0      0       0      31        0.0%
   585 ;;SFR30                0      0       0      31        0.0%
   586 ;;BITSFR31             0      0       0      32        0.0%
   587 ;;SFR31                0      0       0      32        0.0%
   588                           
   589                           
   590 ;; *************** function _main *****************
   591 ;; Defined at:
   592 ;;		line 84 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;		None               void
   599 ;; Registers used:
   600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 17F/0
   603 ;;		On exit  : 1F/0
   604 ;;		Unchanged: FFE00/0
   605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   606 ;;      Params:         0       0       0       0
   607 ;;      Locals:         0       0       0       0
   608 ;;      Temps:          0       1       0       0
   609 ;;      Totals:         0       1       0       0
   610 ;;Total ram usage:        1 bytes
   611 ;; Hardware stack levels required when called:    6
   612 ;; This function calls:
   613 ;;		_Example_System_Init
   614 ;;		_mTouch_Init
   615 ;;		_mTouch_Decode
   616 ;;		_KeyExecute
   617 ;; This function is called by:
   618 ;;		Startup code after reset
   619 ;; This function uses a non-reentrant model
   620 ;;
   621  0130                     _main:	
   622                           
   623                           ;main.c: 85: Example_System_Init();
   624                           
   625                           ; Regs used in _main: [wreg-status,0+pclath+cstack]
   626  0130  220E  3181         	fcall	_Example_System_Init
   627                           
   628                           ;main.c: 96: mTouch_Init();
   629  0132  2226  3181         	fcall	_mTouch_Init
   630                           
   631                           ;main.c: 101: INTCONbits.GIE = 1;
   632  0134  178B               	bsf	11,7	;volatile
   633                           
   634                           ;main.c: 103: ledTimer = 30;
   635  0135  301E               	movlw	30
   636  0136  0020               	movlb	0	; select bank0
   637  0137  00B6               	movwf	_ledTimer
   638  0138  01B7               	clrf	_ledTimer+1
   639                           
   640                           ;main.c: 104: led_enable = 1;
   641  0139  177A               	bsf	_led_enable/(0+8),_led_enable& (0+7)
   642  013A                     l23700:	
   643                           
   644                           ;main.c: 107: if ((mTouch_state.dataReady)) {
   645  013A  1C4A               	btfss	_mTouch_state,0
   646  013B  296B               	goto	l23726
   647                           
   648                           ;main.c: 108: mTouch_state.dataReady = 0; mTouch_Decode();
   649  013C  104A               	bcf	_mTouch_state,0
   650  013D  2343  3181         	fcall	_mTouch_Decode
   651                           
   652                           ;main.c: 109: if (mTouch_stateVars.sensor[4].state < MTOUCH_PRESSED){
   653  013F  0835               	movf	(_mTouch_stateVars^(0+128)+21),w
   654  0140  2416  3181         	fcall	PL4	;call to abstracted procedure
   655  0142  1803               	skipnc
   656  0143  2946               	goto	l20302
   657                           
   658                           ;main.c: 110: Key_state.oneBit.Massage = 0;
   659  0144  11C4               	bcf	_Key_state,3
   660                           
   661                           ;main.c: 111: } else {
   662  0145  2947               	goto	l23710
   663  0146                     l20302:	
   664                           
   665                           ;main.c: 112: Key_state.oneBit.Massage = 1;
   666  0146  15C4               	bsf	_Key_state,3
   667  0147                     l23710:	
   668                           
   669                           ;main.c: 113: }
   670                           ;main.c: 115: if (mTouch_stateVars.sensor[3].state < MTOUCH_PRESSED)
   671  0147  0021               	movlb	1	; select bank1
   672  0148  0830               	movf	(_mTouch_stateVars^(0+128)+16),w
   673  0149  2416  3181         	fcall	PL4	;call to abstracted procedure
   674  014B  1803               	skipnc
   675  014C  294F               	goto	l20304
   676                           
   677                           ;main.c: 116: {
   678                           ;main.c: 117: Key_state.oneBit.Heat = 0;
   679  014D  1144               	bcf	_Key_state,2
   680                           
   681                           ;main.c: 118: } else {
   682  014E  2950               	goto	l23714
   683  014F                     l20304:	
   684                           
   685                           ;main.c: 119: Key_state.oneBit.Heat = 1;
   686  014F  1544               	bsf	_Key_state,2
   687  0150                     l23714:	
   688                           
   689                           ;main.c: 120: }
   690                           ;main.c: 122: if (mTouch_stateVars.sensor[2].state < MTOUCH_PRESSED)
   691  0150  0021               	movlb	1	; select bank1
   692  0151  082B               	movf	(_mTouch_stateVars^(0+128)+11),w
   693  0152  2416  3181         	fcall	PL4	;call to abstracted procedure
   694  0154  1803               	skipnc
   695  0155  2958               	goto	l20306
   696                           
   697                           ;main.c: 123: {
   698                           ;main.c: 124: Key_state.oneBit.Light = 0;
   699  0156  1244               	bcf	_Key_state,4
   700                           
   701                           ;main.c: 125: } else {
   702  0157  2959               	goto	l23718
   703  0158                     l20306:	
   704                           
   705                           ;main.c: 126: Key_state.oneBit.Light = 1;
   706  0158  1644               	bsf	_Key_state,4
   707  0159                     l23718:	
   708                           
   709                           ;main.c: 127: }
   710                           ;main.c: 129: if (mTouch_stateVars.sensor[1].state < MTOUCH_PRESSED){
   711  0159  0021               	movlb	1	; select bank1
   712  015A  0826               	movf	(_mTouch_stateVars^(0+128)+6),w
   713  015B  2416  3181         	fcall	PL4	;call to abstracted procedure
   714  015D  1803               	skipnc
   715  015E  2961               	goto	l20308
   716                           
   717                           ;main.c: 130: Key_state.oneBit.PRClose = 0;
   718  015F  10C4               	bcf	_Key_state,1
   719                           
   720                           ;main.c: 131: } else {
   721  0160  2962               	goto	l23722
   722  0161                     l20308:	
   723                           
   724                           ;main.c: 132: Key_state.oneBit.PRClose = 1;
   725  0161  14C4               	bsf	_Key_state,1
   726  0162                     l23722:	
   727                           
   728                           ;main.c: 133: }
   729                           ;main.c: 135: if (mTouch_stateVars.sensor[0].state < MTOUCH_PRESSED){
   730  0162  0021               	movlb	1	; select bank1
   731  0163  0821               	movf	(_mTouch_stateVars^(0+128)+1),w
   732  0164  2416  3181         	fcall	PL4	;call to abstracted procedure
   733  0166  1803               	skipnc
   734  0167  296A               	goto	l20310
   735                           
   736                           ;main.c: 136: Key_state.oneBit.PROpen = 0;
   737  0168  1044               	bcf	_Key_state,0
   738                           
   739                           ;main.c: 137: } else {
   740  0169  296B               	goto	l23726
   741  016A                     l20310:	
   742                           
   743                           ;main.c: 138: Key_state.oneBit.PROpen = 1;
   744  016A  1444               	bsf	_Key_state,0
   745  016B                     l23726:	
   746                           
   747                           ;main.c: 139: }
   748                           ;main.c: 140: }
   749                           ;main.c: 142: KeyExecute();
   750  016B  216E  3181         	fcall	_KeyExecute
   751  016D  293A               	goto	l23700
   752  016E                     __end_of_main:	
   753  016E                     __ptext598:	
   754 ;; =============== function _mTouch_ChangeMode ends ============
   755                           
   756                           
   757 ;; *************** function _KeyExecute *****************
   758 ;; Defined at:
   759 ;;		line 17 in file "ICH-LR-HR.C"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;		None               void
   766 ;; Registers used:
   767 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   768 ;; Tracked objects:
   769 ;;		On entry : 1F/0
   770 ;;		On exit  : 1F/0
   771 ;;		Unchanged: FFFE0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   773 ;;      Params:         0       0       0       0
   774 ;;      Locals:         0       0       0       0
   775 ;;      Temps:          0       2       0       0
   776 ;;      Totals:         0       2       0       0
   777 ;;Total ram usage:        2 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    3
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786  016E                     _KeyExecute:	
   787                           
   788                           ;ICH-LR-HR.C: 18: if (Key_state.allBits){
   789                           
   790                           ; Regs used in _KeyExecute: [wreg-fsr0h+status,2+status,0]
   791  016E  0844               	movf	_Key_state,w
   792  016F  1903               	btfsc	3,2
   793  0170  29F6               	goto	l23246
   794                           
   795                           ;ICH-LR-HR.C: 19: ledTimer = 30;
   796  0171  301E               	movlw	30
   797  0172  00B6               	movwf	_ledTimer
   798  0173  01B7               	clrf	_ledTimer+1
   799                           
   800                           ;ICH-LR-HR.C: 20: if(!led_enable){
   801  0174  1B7A               	btfsc	_led_enable/(0+8),_led_enable& (0+7)
   802  0175  2978               	goto	l1860
   803                           
   804                           ;ICH-LR-HR.C: 21: flag_led_enable = 1;
   805  0176  14FA               	bsf	_flag_led_enable/(0+8),_flag_led_enable& (0+7)
   806                           
   807                           ;ICH-LR-HR.C: 22: led_enable = 1;
   808  0177  177A               	bsf	_led_enable/(0+8),_led_enable& (0+7)
   809  0178                     l1860:	
   810                           
   811                           ;ICH-LR-HR.C: 23: }
   812                           ;ICH-LR-HR.C: 26: if (Key_state.oneBit.PROpen && Key_state.oneBit.PRClose){
   813  0178  1844               	btfsc	_Key_state,0
   814  0179  1CC4               	btfss	_Key_state,1
   815  017A  2980               	goto	l1861
   816                           
   817                           ;ICH-LR-HR.C: 27: flag_pr_open = flag_pr_close = 0;
   818  017B  127A               	bcf	_flag_pr_close/(0+8),_flag_pr_close& (0+7)
   819  017C  12FA               	bcf	_flag_pr_open/(0+8),_flag_pr_open& (0+7)
   820                           
   821                           ;ICH-LR-HR.C: 28: Key_LED.oneBit.PROpen = Key_LED.oneBit.PRClose= 0;
   822  017D  10FB               	bcf	_Key_LED,1
   823  017E  107B               	bcf	_Key_LED,0
   824                           
   825                           ;ICH-LR-HR.C: 29: } else {
   826  017F  2992               	goto	l1862
   827  0180                     l1861:	
   828                           
   829                           ;ICH-LR-HR.C: 31: if (Key_state.oneBit.PROpen){
   830  0180  1C44               	btfss	_Key_state,0
   831  0181  2987               	goto	l1863
   832                           
   833                           ;ICH-LR-HR.C: 32: if (!flag_pr_open){
   834  0182  1AFA               	btfsc	_flag_pr_open/(0+8),_flag_pr_open& (0+7)
   835  0183  2989               	goto	l1865
   836                           
   837                           ;ICH-LR-HR.C: 33: flag_pr_open = 1;
   838  0184  16FA               	bsf	_flag_pr_open/(0+8),_flag_pr_open& (0+7)
   839                           
   840                           ;ICH-LR-HR.C: 34: Key_LED.oneBit.PROpen = 1;
   841  0185  147B               	bsf	_Key_LED,0
   842  0186  2989               	goto	l1865
   843  0187                     l1863:	
   844                           
   845                           ;ICH-LR-HR.C: 37: else{
   846                           ;ICH-LR-HR.C: 38: flag_pr_open = 0;
   847  0187  12FA               	bcf	_flag_pr_open/(0+8),_flag_pr_open& (0+7)
   848                           
   849                           ;ICH-LR-HR.C: 39: Key_LED.oneBit.PROpen = 0;
   850  0188  107B               	bcf	_Key_LED,0
   851  0189                     l1865:	
   852                           
   853                           ;ICH-LR-HR.C: 40: }
   854                           ;ICH-LR-HR.C: 43: if (Key_state.oneBit.PRClose){
   855  0189  1CC4               	btfss	_Key_state,1
   856  018A  2990               	goto	l1866
   857                           
   858                           ;ICH-LR-HR.C: 44: if (!flag_pr_close){
   859  018B  1A7A               	btfsc	_flag_pr_close/(0+8),_flag_pr_close& (0+7)
   860  018C  2992               	goto	l1862
   861                           
   862                           ;ICH-LR-HR.C: 45: flag_pr_close = 1;
   863  018D  167A               	bsf	_flag_pr_close/(0+8),_flag_pr_close& (0+7)
   864                           
   865                           ;ICH-LR-HR.C: 46: Key_LED.oneBit.PRClose = 1;
   866  018E  14FB               	bsf	_Key_LED,1
   867  018F  2992               	goto	l1862
   868  0190                     l1866:	
   869                           
   870                           ;ICH-LR-HR.C: 49: else{
   871                           ;ICH-LR-HR.C: 50: flag_pr_close = 0;
   872  0190  127A               	bcf	_flag_pr_close/(0+8),_flag_pr_close& (0+7)
   873                           
   874                           ;ICH-LR-HR.C: 51: Key_LED.oneBit.PRClose = 0;
   875  0191  10FB               	bcf	_Key_LED,1
   876  0192                     l1862:	
   877                           
   878                           ;ICH-LR-HR.C: 52: }
   879                           ;ICH-LR-HR.C: 53: }
   880                           ;ICH-LR-HR.C: 56: if(!flag_led_enable){
   881  0192  18FA               	btfsc	_flag_led_enable/(0+8),_flag_led_enable& (0+7)
   882  0193  0008               	return
   883                           
   884                           ;ICH-LR-HR.C: 57: if (Key_state.oneBit.Heat){
   885  0194  1D44               	btfss	_Key_state,2
   886  0195  29B6               	goto	l1870
   887                           
   888                           ;ICH-LR-HR.C: 58: if(!flag_heat){
   889  0196  187A               	btfsc	_flag_heat/(0+8),_flag_heat& (0+7)
   890  0197  29B7               	goto	l1878
   891  0198  3008               	movlw	8
   892                           
   893                           ;ICH-LR-HR.C: 59: flag_heat = 1;
   894  0199  147A               	bsf	_flag_heat/(0+8),_flag_heat& (0+7)
   895                           
   896                           ;ICH-LR-HR.C: 60: Key_LED.oneBit.Heat = 1;
   897  019A  157B               	bsf	_Key_LED,2
   898                           
   899                           ;ICH-LR-HR.C: 61: heatTimer = 30*60;
   900  019B  00B4               	movwf	_heatTimer
   901  019C  3007               	movlw	7
   902  019D  00B5               	movwf	_heatTimer+1
   903  019E  3003               	movlw	3
   904                           
   905                           ;ICH-LR-HR.C: 63: heatState++;
   906  019F  0AC7               	incf	_heatState,f
   907                           
   908                           ;ICH-LR-HR.C: 64: if (heatState >= 3){
   909  01A0  0247               	subwf	_heatState,w
   910  01A1  1C03               	skipc
   911  01A2  29AE               	goto	l23212
   912                           
   913                           ;ICH-LR-HR.C: 65: heatState = 0;
   914  01A3  01C7               	clrf	_heatState
   915                           
   916                           ;ICH-LR-HR.C: 66: Key_LED.oneBit.Heat = 0;
   917  01A4  117B               	bcf	_Key_LED,2
   918  01A5  29AE               	goto	l23212
   919  01A6                     l23206:	
   920                           
   921                           ;ICH-LR-HR.C: 70: heatIntensity = 6*20/10;
   922  01A6  300C               	movlw	12
   923  01A7  00C5               	movwf	_heatIntensity
   924                           
   925                           ;ICH-LR-HR.C: 71: heatLedIntensity = 20;
   926  01A8  3014               	movlw	20
   927  01A9  29AC               	goto	L8
   928  01AA                     l23208:	
   929                           ;ICH-LR-HR.C: 72: break;
   930                           
   931                           
   932                           ;ICH-LR-HR.C: 74: heatIntensity = 3*20/10;
   933  01AA  3006               	movlw	6
   934  01AB  00C5               	movwf	_heatIntensity
   935  01AC                     L8:	
   936                           
   937                           ;ICH-LR-HR.C: 75: heatLedIntensity = 3*20/10;
   938  01AC  00C6               	movwf	_heatLedIntensity
   939                           
   940                           ;ICH-LR-HR.C: 76: break;
   941  01AD  29B7               	goto	l1878
   942  01AE                     l23212:	
   943  01AE  0847               	movf	_heatState,w
   944                           
   945                           ; Switch size 1, requested type "space"
   946                           ; Number of cases is 2, Range of values is 1 to 2
   947                           ; switch strategies available:
   948                           ; Name         Instructions Cycles
   949                           ; simple_byte            7     4 (average)
   950                           ; direct_byte           13     9 (fixed)
   951                           ; jumptable            263     9 (fixed)
   952                           ;	Chosen strategy is simple_byte
   953  01AF  3A01               	xorlw	1	; case 1
   954  01B0  1903               	skipnz
   955  01B1  29A6               	goto	l23206
   956  01B2  3A03               	xorlw	3	; case 2
   957  01B3  1903               	skipnz
   958  01B4  29AA               	goto	l23208
   959  01B5  29B7               	goto	l1878
   960  01B6                     l1870:	
   961                           
   962                           ;ICH-LR-HR.C: 82: flag_heat = 0;
   963  01B6  107A               	bcf	_flag_heat/(0+8),_flag_heat& (0+7)
   964  01B7                     l1878:	
   965                           
   966                           ;ICH-LR-HR.C: 83: }
   967                           ;ICH-LR-HR.C: 86: if (Key_state.oneBit.Massage){
   968  01B7  1DC4               	btfss	_Key_state,3
   969  01B8  29DF               	goto	l1879
   970                           
   971                           ;ICH-LR-HR.C: 87: if (!flag_massage){
   972  01B9  19FA               	btfsc	_flag_massage/(0+8),_flag_massage& (0+7)
   973  01BA  29E0               	goto	l1888
   974  01BB  30B0               	movlw	176
   975                           
   976                           ;ICH-LR-HR.C: 88: flag_massage = 1;
   977  01BC  15FA               	bsf	_flag_massage/(0+8),_flag_massage& (0+7)
   978                           
   979                           ;ICH-LR-HR.C: 89: Key_LED.oneBit.Massage = 1;
   980  01BD  15FB               	bsf	_Key_LED,3
   981                           
   982                           ;ICH-LR-HR.C: 90: massageTimer = 20*60;
   983  01BE  00BC               	movwf	_massageTimer
   984  01BF  3004               	movlw	4
   985  01C0  00BD               	movwf	_massageTimer+1
   986                           
   987                           ;ICH-LR-HR.C: 91: massageState++;
   988  01C1  0ACD               	incf	_massageState,f
   989                           
   990                           ;ICH-LR-HR.C: 92: if (massageState >= 4){
   991  01C2  024D               	subwf	_massageState,w
   992  01C3  1C03               	skipc
   993  01C4  29D4               	goto	l23236
   994                           
   995                           ;ICH-LR-HR.C: 93: massageState = 0;
   996  01C5  01CD               	clrf	_massageState
   997                           
   998                           ;ICH-LR-HR.C: 94: Key_LED.oneBit.Massage = 0;
   999  01C6  11FB               	bcf	_Key_LED,3
  1000  01C7  29D4               	goto	l23236
  1001  01C8                     l23228:	
  1002                           
  1003                           ;ICH-LR-HR.C: 98: massageIntensity = 7*20/10;
  1004  01C8  300E               	movlw	14
  1005  01C9  00CB               	movwf	_massageIntensity
  1006                           
  1007                           ;ICH-LR-HR.C: 99: massageLedIntensity = 20;
  1008  01CA  3014               	movlw	20
  1009  01CB  29D2               	goto	L10
  1010  01CC                     l23230:	
  1011                           ;ICH-LR-HR.C: 100: break;
  1012                           
  1013                           
  1014                           ;ICH-LR-HR.C: 102: massageIntensity = 5*20/10;
  1015  01CC  300A               	movlw	10
  1016  01CD  00CB               	movwf	_massageIntensity
  1017  01CE  29D2               	goto	L10
  1018  01CF                     l23232:	
  1019                           ;ICH-LR-HR.C: 104: break;
  1020                           
  1021                           ;ICH-LR-HR.C: 103: massageLedIntensity = 5*20/10;
  1022                           
  1023                           
  1024                           ;ICH-LR-HR.C: 106: massageIntensity = 3*20/10;
  1025  01CF  3006               	movlw	6
  1026  01D0  00CB               	movwf	_massageIntensity
  1027                           
  1028                           ;ICH-LR-HR.C: 107: massageLedIntensity = 2*20/10;
  1029  01D1  3004               	movlw	4
  1030  01D2                     L10:	
  1031  01D2  00CC               	movwf	_massageLedIntensity
  1032                           
  1033                           ;ICH-LR-HR.C: 108: break;
  1034  01D3  29E0               	goto	l1888
  1035  01D4                     l23236:	
  1036  01D4  084D               	movf	_massageState,w
  1037                           
  1038                           ; Switch size 1, requested type "space"
  1039                           ; Number of cases is 3, Range of values is 1 to 3
  1040                           ; switch strategies available:
  1041                           ; Name         Instructions Cycles
  1042                           ; simple_byte           10     6 (average)
  1043                           ; direct_byte           15     9 (fixed)
  1044                           ; jumptable            263     9 (fixed)
  1045                           ;	Chosen strategy is simple_byte
  1046  01D5  3A01               	xorlw	1	; case 1
  1047  01D6  1903               	skipnz
  1048  01D7  29C8               	goto	l23228
  1049  01D8  3A03               	xorlw	3	; case 2
  1050  01D9  1903               	skipnz
  1051  01DA  29CC               	goto	l23230
  1052  01DB  3A01               	xorlw	1	; case 3
  1053  01DC  1903               	skipnz
  1054  01DD  29CF               	goto	l23232
  1055  01DE  29E0               	goto	l1888
  1056  01DF                     l1879:	
  1057                           
  1058                           ;ICH-LR-HR.C: 114: flag_massage = 0;
  1059  01DF  11FA               	bcf	_flag_massage/(0+8),_flag_massage& (0+7)
  1060  01E0                     l1888:	
  1061                           
  1062                           ;ICH-LR-HR.C: 115: }
  1063                           ;ICH-LR-HR.C: 118: if (Key_state.oneBit.Light){
  1064  01E0  1E44               	btfss	_Key_state,4
  1065  01E1  29F4               	goto	l1889
  1066                           
  1067                           ;ICH-LR-HR.C: 119: if (!flag_light){
  1068  01E2  197A               	btfsc	_flag_light/(0+8),_flag_light& (0+7)
  1069  01E3  0008               	return
  1070  01E4  3010               	movlw	16
  1071                           
  1072                           ;ICH-LR-HR.C: 120: flag_light = 1;
  1073  01E5  157A               	bsf	_flag_light/(0+8),_flag_light& (0+7)
  1074                           
  1075                           ;ICH-LR-HR.C: 121: lightTimer = 60*60;
  1076  01E6  00B8               	movwf	_lightTimer
  1077  01E7  300E               	movlw	14
  1078  01E8  00B9               	movwf	_lightTimer+1
  1079                           
  1080                           ;ICH-LR-HR.C: 122: Key_LED.oneBit.Light = !Key_LED.oneBit.Light;
  1081  01E9  3000               	movlw	0
  1082  01EA  1E7B               	btfss	_Key_LED,4
  1083  01EB  3001               	movlw	1
  1084  01EC  00CF               	movwf	??_KeyExecute
  1085  01ED  0ECF               	swapf	??_KeyExecute,f
  1086  01EE  087B               	movf	_Key_LED,w
  1087  01EF  064F               	xorwf	??_KeyExecute,w
  1088  01F0  39EF               	andlw	-17
  1089  01F1  064F               	xorwf	??_KeyExecute,w
  1090  01F2  00FB               	movwf	_Key_LED
  1091  01F3  0008               	return
  1092  01F4                     l1889:	
  1093                           
  1094                           ;ICH-LR-HR.C: 125: flag_light = 0;
  1095  01F4  117A               	bcf	_flag_light/(0+8),_flag_light& (0+7)
  1096  01F5  0008               	return
  1097  01F6                     l23246:	
  1098                           ;ICH-LR-HR.C: 126: }
  1099                           ;ICH-LR-HR.C: 127: }
  1100                           ;ICH-LR-HR.C: 128: }else{
  1101                           
  1102  01F6  3000               	movlw	0
  1103                           
  1104                           ;ICH-LR-HR.C: 129: Key_LED.oneBit.PROpen = Key_LED.oneBit.PRClose = flag_pr_open = flag_
      +                          pr_close = flag_heat = flag_massage = flag_light = flag_led_enable = 0;
  1105  01F7  10FA               	bcf	_flag_led_enable/(0+8),_flag_led_enable& (0+7)
  1106  01F8  117A               	bcf	_flag_light/(0+8),_flag_light& (0+7)
  1107  01F9  11FA               	bcf	_flag_massage/(0+8),_flag_massage& (0+7)
  1108  01FA  107A               	bcf	_flag_heat/(0+8),_flag_heat& (0+7)
  1109  01FB  127A               	bcf	_flag_pr_close/(0+8),_flag_pr_close& (0+7)
  1110  01FC  12FA               	bcf	_flag_pr_open/(0+8),_flag_pr_open& (0+7)
  1111  01FD  1AFA               	btfsc	_flag_pr_open/(0+8),_flag_pr_open& (0+7)
  1112  01FE  3001               	movlw	1
  1113  01FF  00CF               	movwf	??_KeyExecute
  1114  0200  0DCF               	rlf	??_KeyExecute,f
  1115  0201  087B               	movf	_Key_LED,w
  1116  0202  064F               	xorwf	??_KeyExecute,w
  1117  0203  39FD               	andlw	-3
  1118  0204  064F               	xorwf	??_KeyExecute,w
  1119  0205  00FB               	movwf	_Key_LED
  1120  0206  0C7B               	rrf	_Key_LED,w
  1121  0207  3901               	andlw	1
  1122  0208  00D0               	movwf	??_KeyExecute+1
  1123  0209  067B               	xorwf	_Key_LED,w
  1124  020A  39FE               	andlw	-2
  1125  020B  0650               	xorwf	??_KeyExecute+1,w
  1126  020C  00FB               	movwf	_Key_LED
  1127  020D  0008               	return
  1128  020E                     __end_of_KeyExecute:	
  1129  020E                     __ptext596:	
  1130 ;; =============== function ___bmul ends ============
  1131                           
  1132                           
  1133 ;; *************** function _Example_System_Init *****************
  1134 ;; Defined at:
  1135 ;;		line 158 in file "main.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;		None               void
  1142 ;; Registers used:
  1143 ;;		wreg, status,2
  1144 ;; Tracked objects:
  1145 ;;		On entry : 17F/0
  1146 ;;		On exit  : 17F/1
  1147 ;;		Unchanged: FFE80/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1149 ;;      Params:         0       0       0       0
  1150 ;;      Locals:         0       0       0       0
  1151 ;;      Temps:          0       0       0       0
  1152 ;;      Totals:         0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    3
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162  020E                     _Example_System_Init:	
  1163                           
  1164                           ;main.c: 169: OSCCON = 0b11110000;
  1165                           
  1166                           ; Regs used in _Example_System_Init: [wreg+status,2]
  1167  020E  30F0               	movlw	240
  1168  020F  0021               	movlb	1	; select bank1
  1169  0210  0099               	movwf	25	;volatile
  1170                           
  1171                           ;main.c: 175: ANSELA = 0b00000000;
  1172  0211  0023               	movlb	3	; select bank3
  1173  0212  018C               	clrf	12	;volatile
  1174                           
  1175                           ;main.c: 176: ANSELB = 0b00000000;
  1176  0213  018D               	clrf	13	;volatile
  1177                           
  1178                           ;main.c: 183: PORTA = 0b00000000;
  1179  0214  0020               	movlb	0	; select bank0
  1180  0215  018C               	clrf	12	;volatile
  1181                           
  1182                           ;main.c: 184: PORTB = 0b00000000;
  1183  0216  018D               	clrf	13	;volatile
  1184                           
  1185                           ;main.c: 185: PORTC = 0b00000000;
  1186  0217  018E               	clrf	14	;volatile
  1187                           
  1188                           ;main.c: 189: PORTE = 0b00000000;
  1189  0218  0190               	clrf	16	;volatile
  1190                           
  1191                           ;main.c: 190: TRISA = 0b00000000;
  1192  0219  0021               	movlb	1	; select bank1
  1193  021A  018C               	clrf	12	;volatile
  1194                           
  1195                           ;main.c: 191: TRISB = 0b00000000;
  1196  021B  018D               	clrf	13	;volatile
  1197                           
  1198                           ;main.c: 192: TRISC = 0b00000000;
  1199  021C  018E               	clrf	14	;volatile
  1200                           
  1201                           ;main.c: 196: TRISE = 0b00000000;
  1202  021D  0190               	clrf	16	;volatile
  1203                           
  1204                           ;main.c: 202: OPTION_REG = 0b10001000;
  1205  021E  3088               	movlw	136
  1206  021F  0095               	movwf	21	;volatile
  1207                           
  1208                           ;main.c: 204: T2CON = 0b01111111;
  1209  0220  307F               	movlw	127
  1210  0221  0020               	movlb	0	; select bank0
  1211  0222  009C               	movwf	28	;volatile
  1212                           
  1213                           ;main.c: 205: TMR2IE = 1;
  1214  0223  0021               	movlb	1	; select bank1
  1215  0224  1491               	bsf	17,1
  1216  0225  0008               	return
  1217  0226                     __end_of_Example_System_Init:	
  1218  0226                     __ptext594:	
  1219 ;; =============== function _mTouch_ButtonStateMachine ends ============
  1220                           
  1221                           
  1222 ;; *************** function _mTouch_Init *****************
  1223 ;; Defined at:
  1224 ;;		line 210 in file "mTouch.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  acqData         1    3[BANK0 ] PTR struct .
  1229 ;;		 -> mTouch_acqData(20), 
  1230 ;;  sensorIndex     1    4[BANK0 ] char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;		None               void
  1233 ;; Registers used:
  1234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 17F/1
  1237 ;;		On exit  : 17F/1
  1238 ;;		Unchanged: FFE80/0
  1239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1240 ;;      Params:         0       0       0       0
  1241 ;;      Locals:         0       2       0       0
  1242 ;;      Temps:          0       0       0       0
  1243 ;;      Totals:         0       2       0       0
  1244 ;;Total ram usage:        2 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    4
  1247 ;; This function calls:
  1248 ;;		___bmul
  1249 ;;		_mTouch_ChangeMode
  1250 ;; This function is called by:
  1251 ;;		_main
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254  0226                     _mTouch_Init:	
  1255                           
  1256                           ;mTouch.c: 228: for (int8_t sensorIndex = 5-1; sensorIndex >= 0; sensorIndex--)
  1257                           
  1258                           ; Regs used in _mTouch_Init: [wreg+fsr1l-status,0+pclath+cstack]
  1259  0226  3004               	movlw	4
  1260  0227  0020               	movlb	0	; select bank0
  1261  0228  00D3               	movwf	mTouch_Init@sensorIndex
  1262  0229                     l23546:	
  1263                           
  1264                           ;mTouch.c: 229: {
  1265                           ;mTouch.c: 232: mTouch_AcquisitionData* acqData = &mTouch_acqData[sensorIndex];
  1266  0229  0853               	movf	mTouch_Init@sensorIndex,w
  1267  022A  0709               	addwf	9,w
  1268  022B  0709               	addwf	9,w
  1269  022C  3EBA               	addlw	_mTouch_acqData& (0+255)
  1270  022D  00D2               	movwf	mTouch_Init@acqData
  1271                           
  1272                           ;mTouch.c: 233: (*acqData).result.v &= 0x000F;
  1273  022E  3E02               	addlw	2
  1274  022F  0086               	movwf	6
  1275  0230  300F               	movlw	15
  1276  0231  0187               	clrf	7
  1277  0232  0581               	andwf	1,f
  1278  0233  3141               	addfsr 1,1
  1279  0234  0181               	clrf	1
  1280                           
  1281                           ;mTouch.c: 234: (*acqData).result.v |= (uint16_t)(0x47F << 4);
  1282  0235  0852               	movf	mTouch_Init@acqData,w
  1283  0236  3E02               	addlw	2
  1284  0237  0086               	movwf	6
  1285  0238  30F0               	movlw	240
  1286  0239  0187               	clrf	7
  1287  023A  0481               	iorwf	1,f
  1288  023B  3141               	addfsr 1,1
  1289  023C  3047               	movlw	71
  1290  023D  0481               	iorwf	1,f
  1291                           
  1292                           ;mTouch.c: 236: mTouch_stateVars.sensor[sensorIndex].state = MTOUCH_INITIALIZING;
  1293  023E  3005               	movlw	5
  1294  023F  00CF               	movwf	?___bmul
  1295  0240  0853               	movf	mTouch_Init@sensorIndex,w
  1296  0241  2337  3181         	fcall	___bmul
  1297  0243  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1298  0244  0086               	movwf	6
  1299  0245  30FC               	movlw	-4
  1300  0246  0187               	clrf	7
  1301  0247  0581               	andwf	1,f
  1302                           
  1303                           ;mTouch.c: 238: mTouch_stateVars.sensor[sensorIndex].timeout = 0;
  1304  0248  3005               	movlw	5
  1305  0249  00CF               	movwf	?___bmul
  1306  024A  0853               	movf	mTouch_Init@sensorIndex,w
  1307  024B  2337  3181         	fcall	___bmul
  1308  024D  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1309  024E  0086               	movwf	6
  1310  024F  3005               	movlw	5
  1311  0250  0187               	clrf	7
  1312  0251  1181               	bcf	1,3
  1313                           
  1314                           ;mTouch.c: 240: mTouch_stateVars.sensor[sensorIndex].timer = 30;
  1315  0252  00CF               	movwf	?___bmul
  1316  0253  0853               	movf	mTouch_Init@sensorIndex,w
  1317  0254  2337  3181         	fcall	___bmul
  1318  0256  3EA3               	addlw	(_mTouch_stateVars+3)& (0+255)
  1319  0257  0086               	movwf	6
  1320  0258  301E               	movlw	30
  1321  0259  0187               	clrf	7
  1322  025A  3FC0               	movwi [0]fsr1
  1323  025B  3000               	movlw	0
  1324  025C  3FC1               	movwi [1]fsr1
  1325                           
  1326                           ;mTouch.c: 241: mTouch_stateVars.sensor[sensorIndex].baselineCount = 255;
  1327  025D  3005               	movlw	5
  1328  025E  00CF               	movwf	?___bmul
  1329  025F  0853               	movf	mTouch_Init@sensorIndex,w
  1330  0260  2337  3181         	fcall	___bmul
  1331  0262  2449  3181         	fcall	PL12	;call to abstracted procedure
  1332                           
  1333                           ;mTouch.c: 243: mTouch_stateVars.sensor[sensorIndex].debounce = 0;
  1334  0264  3005               	movlw	5
  1335  0265  00CF               	movwf	?___bmul
  1336  0266  0853               	movf	mTouch_Init@sensorIndex,w
  1337  0267  2337  3181         	fcall	___bmul
  1338  0269  3EA5               	addlw	(_mTouch_stateVars+5)& (0+255)
  1339  026A  0086               	movwf	6
  1340  026B  30FC               	movlw	-4
  1341  026C  0187               	clrf	7
  1342  026D  0581               	andwf	1,f
  1343                           
  1344                           ;mTouch.c: 246: mTouch_average [sensorIndex] = 0;
  1345  026E  3553               	lslf	mTouch_Init@sensorIndex,w
  1346  026F  3E20               	addlw	_mTouch_average& (0+255)
  1347  0270  0086               	movwf	6
  1348  0271  0181               	clrf	1
  1349  0272  3141               	addfsr 1,1
  1350  0273  0181               	clrf	1
  1351  0274  03D3               	decf	mTouch_Init@sensorIndex,f
  1352  0275  1FD3               	btfss	mTouch_Init@sensorIndex,7
  1353  0276  2A29               	goto	l23546
  1354                           
  1355                           ;mTouch.c: 251: }
  1356                           ;mTouch.c: 280: mTouch_state.dataReady = 0;
  1357  0277  104A               	bcf	_mTouch_state,0
  1358                           
  1359                           ;mTouch.c: 281: mTouch_state.areInitialized = 0;
  1360  0278  10CA               	bcf	_mTouch_state,1
  1361                           
  1362                           ;mTouch.c: 306: mTouch_ChangeMode();
  1363  0279  2358               	fcall	_mTouch_ChangeMode
  1364                           
  1365                           ;mTouch.c: 310: ADCON1bits.ADCS = 0b101; ADCON1bits.ADFM = 1;;
  1366  027A  081E               	movf	30,w	;volatile
  1367  027B  398F               	andlw	-113
  1368  027C  3850               	iorlw	80
  1369  027D  009E               	movwf	30	;volatile
  1370  027E  179E               	bsf	30,7	;volatile
  1371                           
  1372                           ;mTouch.c: 316: TMR0IF = 0; TMR0IE = 1;;
  1373  027F  110B               	bcf	11,2
  1374  0280  168B               	bsf	11,5
  1375  0281  0008               	return
  1376  0282                     __end_of_mTouch_Init:	
  1377  0282                     __ptext592:	
  1378 ;; =============== function _mTouch_Decode ends ============
  1379                           
  1380                           
  1381 ;; *************** function _mTouch_UpdateBaseline *****************
  1382 ;; Defined at:
  1383 ;;		line 970 in file "mTouch.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  reading         2   10[BANK0 ] unsigned int 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;		None               void
  1390 ;; Registers used:
  1391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 1F/0
  1394 ;;		On exit  : 1F/0
  1395 ;;		Unchanged: FFE00/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1397 ;;      Params:         0       0       0       0
  1398 ;;      Locals:         0       2       0       0
  1399 ;;      Temps:          0       7       0       0
  1400 ;;      Totals:         0       9       0       0
  1401 ;;Total ram usage:        9 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    4
  1404 ;; This function calls:
  1405 ;;		___bmul
  1406 ;; This function is called by:
  1407 ;;		_mTouch_Decode
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410  0282                     _mTouch_UpdateBaseline:	
  1411                           
  1412                           ;mTouch.c: 971: uint16_t reading = mTouch_sensorData[mTouch_currentScan];
  1413                           
  1414                           ; Regs used in _mTouch_UpdateBaseline: [wreg-status,0+pclath+cstack]
  1415  0282  3548               	lslf	_mTouch_currentScan,w
  1416  0283  3E2A               	addlw	_mTouch_sensorData& (0+255)
  1417  0284  0086               	movwf	6
  1418  0285  0187               	clrf	7
  1419  0286  3F40               	moviw [0]fsr1
  1420  0287  00D9               	movwf	mTouch_UpdateBaseline@reading
  1421  0288  3F41               	moviw [1]fsr1
  1422  0289  00DA               	movwf	mTouch_UpdateBaseline@reading+1
  1423                           
  1424                           ;mTouch.c: 987: if (mTouch_stateVars.sensor[mTouch_currentScan].timeout)
  1425  028A  3005               	movlw	5
  1426  028B  00CF               	movwf	?___bmul
  1427  028C  0848               	movf	_mTouch_currentScan,w
  1428  028D  2337  3181         	fcall	___bmul
  1429  028F  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1430  0290  0086               	movwf	6
  1431  0291  0187               	clrf	7
  1432  0292  1D81               	btfss	1,3
  1433  0293  2AC3               	goto	l9221
  1434                           
  1435                           ;mTouch.c: 988: {
  1436                           ;mTouch.c: 989: if ((int16_t)(mTouch_average[mTouch_currentScan] - reading) > (int16_t)(
      +                          mTouch_pressThreshold[mTouch_currentScan] >> 1))
  1437  0294  3548               	lslf	_mTouch_currentScan,w
  1438  0295  243B  3181         	fcall	PL10	;call to abstracted procedure
  1439  0297  0859               	movf	mTouch_UpdateBaseline@reading,w
  1440  0298  0252               	subwf	??_mTouch_UpdateBaseline,w
  1441  0299  00D4               	movwf	??_mTouch_UpdateBaseline+2
  1442  029A  085A               	movf	mTouch_UpdateBaseline@reading+1,w
  1443  029B  3B53               	subwfb	??_mTouch_UpdateBaseline+1,w
  1444  029C  00D5               	movwf	??_mTouch_UpdateBaseline+3
  1445  029D  242D  3181         	fcall	PL8	;call to abstracted procedure
  1446  029F  00D6               	movwf	??_mTouch_UpdateBaseline+4
  1447  02A0  3F01               	moviw [1]fsr0
  1448  02A1  00D7               	movwf	??_mTouch_UpdateBaseline+5
  1449  02A2  36D7               	lsrf	??_mTouch_UpdateBaseline+5,f
  1450  02A3  0CD6               	rrf	??_mTouch_UpdateBaseline+4,f
  1451  02A4  0857               	movf	??_mTouch_UpdateBaseline+5,w
  1452  02A5  3A80               	xorlw	128
  1453  02A6  00D8               	movwf	??_mTouch_UpdateBaseline+6
  1454  02A7  0855               	movf	??_mTouch_UpdateBaseline+3,w
  1455  02A8  3A80               	xorlw	128
  1456  02A9  0258               	subwf	??_mTouch_UpdateBaseline+6,w
  1457  02AA  1D03               	skipz
  1458  02AB  2AAE               	goto	u1815
  1459  02AC  0854               	movf	??_mTouch_UpdateBaseline+2,w
  1460  02AD  0256               	subwf	??_mTouch_UpdateBaseline+4,w
  1461  02AE                     u1815:	
  1462                           
  1463                           ;mTouch.c: 990: {
  1464                           ;mTouch.c: 991: mTouch_stateVars.sensor[mTouch_currentScan].baselineCorrection = 1;
  1465  02AE  3005               	movlw	5
  1466  02AF  1803               	skipnc
  1467  02B0  2AC4               	goto	L1
  1468  02B1  0020               	movlb	0	; select bank0
  1469  02B2  00CF               	movwf	?___bmul
  1470  02B3  0848               	movf	_mTouch_currentScan,w
  1471  02B4  2337  3181         	fcall	___bmul
  1472  02B6  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1473  02B7  0086               	movwf	6
  1474  02B8  3005               	movlw	5
  1475  02B9  0187               	clrf	7
  1476  02BA  1501               	bsf	1,2
  1477                           
  1478                           ;mTouch.c: 992: mTouch_stateVars.sensor[mTouch_currentScan].timeout = 0;
  1479  02BB  00CF               	movwf	?___bmul
  1480  02BC  0848               	movf	_mTouch_currentScan,w
  1481  02BD  2337  3181         	fcall	___bmul
  1482  02BF  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1483  02C0  0086               	movwf	6
  1484  02C1  0187               	clrf	7
  1485  02C2  1181               	bcf	1,3
  1486  02C3                     l9221:	
  1487                           
  1488                           ;mTouch.c: 993: }
  1489                           ;mTouch.c: 994: }
  1490                           ;mTouch.c: 997: if (mTouch_stateVars.sensor[mTouch_currentScan].baselineCorrection)
  1491  02C3  3005               	movlw	5
  1492  02C4                     L1:	
  1493  02C4  0020               	movlb	0	; select bank0
  1494  02C5  00CF               	movwf	?___bmul
  1495  02C6  0848               	movf	_mTouch_currentScan,w
  1496  02C7  2337  3181         	fcall	___bmul
  1497  02C9  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1498  02CA  0086               	movwf	6
  1499  02CB  3005               	movlw	5
  1500  02CC  0187               	clrf	7
  1501                           
  1502                           ;mTouch.c: 998: {
  1503                           ;mTouch.c: 999: mTouch_stateVars.sensor[mTouch_currentScan].baselineCount = 1;
  1504  02CD  1D01               	btfss	1,2
  1505  02CE  2B02               	goto	L2
  1506  02CF  00CF               	movwf	?___bmul
  1507  02D0  0848               	movf	_mTouch_currentScan,w
  1508  02D1  2337  3181         	fcall	___bmul
  1509  02D3  3EA2               	addlw	(_mTouch_stateVars+2)& (0+255)
  1510  02D4  0086               	movwf	6
  1511  02D5  0187               	clrf	7
  1512  02D6  0801               	movf	1,w
  1513  02D7  3900               	andlw	-256
  1514  02D8  3801               	iorlw	1
  1515  02D9  0081               	movwf	1
  1516                           
  1517                           ;mTouch.c: 1001: if ((int16_t)(mTouch_average[mTouch_currentScan] - reading) < (int16_t)
      +                          (mTouch_releaseThreshold[mTouch_currentScan]))
  1518  02DA  2434  3181         	fcall	PL9	;call to abstracted procedure
  1519  02DC  00D2               	movwf	??_mTouch_UpdateBaseline
  1520  02DD  3F01               	moviw [1]fsr0
  1521  02DE  00D3               	movwf	??_mTouch_UpdateBaseline+1
  1522  02DF  3548               	lslf	_mTouch_currentScan,w
  1523  02E0  3E20               	addlw	_mTouch_average& (0+255)
  1524  02E1  0086               	movwf	6
  1525  02E2  3F40               	moviw [0]fsr1
  1526  02E3  00D4               	movwf	??_mTouch_UpdateBaseline+2
  1527  02E4  3F41               	moviw [1]fsr1
  1528  02E5  00D5               	movwf	??_mTouch_UpdateBaseline+3
  1529  02E6  0859               	movf	mTouch_UpdateBaseline@reading,w
  1530  02E7  0254               	subwf	??_mTouch_UpdateBaseline+2,w
  1531  02E8  00D6               	movwf	??_mTouch_UpdateBaseline+4
  1532  02E9  085A               	movf	mTouch_UpdateBaseline@reading+1,w
  1533  02EA  3B55               	subwfb	??_mTouch_UpdateBaseline+3,w
  1534  02EB  00D7               	movwf	??_mTouch_UpdateBaseline+5
  1535  02EC  3A80               	xorlw	128
  1536  02ED  00D8               	movwf	??_mTouch_UpdateBaseline+6
  1537  02EE  0853               	movf	??_mTouch_UpdateBaseline+1,w
  1538  02EF  3A80               	xorlw	128
  1539  02F0  0258               	subwf	??_mTouch_UpdateBaseline+6,w
  1540  02F1  1D03               	skipz
  1541  02F2  2AF5               	goto	u1835
  1542  02F3  0852               	movf	??_mTouch_UpdateBaseline,w
  1543  02F4  0256               	subwf	??_mTouch_UpdateBaseline+4,w
  1544  02F5                     u1835:	
  1545                           
  1546                           ;mTouch.c: 1002: {
  1547                           ;mTouch.c: 1003: mTouch_stateVars.sensor[mTouch_currentScan].baselineCorrection = 0;
  1548  02F5  3005               	movlw	5
  1549  02F6  1803               	skipnc
  1550  02F7  2B02               	goto	L2
  1551  02F8  0020               	movlb	0	; select bank0
  1552  02F9  00CF               	movwf	?___bmul
  1553  02FA  0848               	movf	_mTouch_currentScan,w
  1554  02FB  2337  3181         	fcall	___bmul
  1555  02FD  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1556  02FE  0086               	movwf	6
  1557  02FF  3005               	movlw	5
  1558  0300  0187               	clrf	7
  1559  0301  1101               	bcf	1,2
  1560  0302                     L2:	
  1561                           ;mTouch.c: 1004: }
  1562                           ;mTouch.c: 1005: }
  1563                           ;mTouch.c: 1010: if ((uint8_t)(--(mTouch_stateVars.sensor[mTouch_currentScan].baselineCo
      +                          unt)) == 0)
  1564                           
  1565  0302  0020               	movlb	0	; select bank0
  1566  0303  00CF               	movwf	?___bmul
  1567  0304  0848               	movf	_mTouch_currentScan,w
  1568  0305  2337  3181         	fcall	___bmul
  1569  0307  3EA2               	addlw	(_mTouch_stateVars+2)& (0+255)
  1570  0308  0086               	movwf	6
  1571  0309  0187               	clrf	7
  1572  030A  0801               	movf	1,w
  1573  030B  39FF               	andlw	255
  1574  030C  00D2               	movwf	??_mTouch_UpdateBaseline
  1575  030D  03D2               	decf	??_mTouch_UpdateBaseline,f
  1576  030E  0801               	movf	1,w
  1577  030F  0652               	xorwf	??_mTouch_UpdateBaseline,w
  1578  0310  3900               	andlw	-256
  1579  0311  0652               	xorwf	??_mTouch_UpdateBaseline,w
  1580  0312  0081               	movwf	1
  1581  0313  0801               	movf	1,w
  1582  0314  39FF               	andlw	255
  1583  0315  1D03               	skipz
  1584  0316  0008               	return
  1585                           
  1586                           ;mTouch.c: 1012: {
  1587                           ;mTouch.c: 1013: mTouch_stateVars.sensor[mTouch_currentScan].baselineCount = 255;
  1588  0317  3005               	movlw	5
  1589  0318  00CF               	movwf	?___bmul
  1590  0319  0848               	movf	_mTouch_currentScan,w
  1591  031A  2337  3181         	fcall	___bmul
  1592  031C  2449  3181         	fcall	PL12	;call to abstracted procedure
  1593                           
  1594                           ;mTouch.c: 1032: mTouch_average[mTouch_currentScan] -= (uint16_t)(mTouch_average[mTouch_
      +                          currentScan] >> 3);
  1595  031E  3548               	lslf	_mTouch_currentScan,w
  1596  031F  243B  3181         	fcall	PL10	;call to abstracted procedure
  1597  0321  241C  3181         	fcall	PL5	;call to abstracted procedure
  1598  0323  0852               	movf	??_mTouch_UpdateBaseline,w
  1599  0324  0281               	subwf	1,f
  1600  0325  3141               	addfsr 1,1
  1601  0326  0853               	movf	??_mTouch_UpdateBaseline+1,w
  1602  0327  3B81               	subwfb	1,f
  1603  0328  317F               	addfsr 1,-1
  1604                           
  1605                           ;mTouch.c: 1033: mTouch_average[mTouch_currentScan] += (uint16_t)(reading >> 3);
  1606  0329  085A               	movf	mTouch_UpdateBaseline@reading+1,w
  1607  032A  00D3               	movwf	??_mTouch_UpdateBaseline+1
  1608  032B  0859               	movf	mTouch_UpdateBaseline@reading,w
  1609  032C  00D2               	movwf	??_mTouch_UpdateBaseline
  1610  032D  241C  3181         	fcall	PL5	;call to abstracted procedure
  1611  032F  0187               	clrf	7
  1612  0330  0852               	movf	??_mTouch_UpdateBaseline,w
  1613  0331  0781               	addwf	1,f
  1614  0332  3141               	addfsr 1,1
  1615  0333  0853               	movf	??_mTouch_UpdateBaseline+1,w
  1616  0334  3D81               	addwfc	1,f
  1617  0335  317F               	addfsr 1,-1
  1618  0336  0008               	return
  1619  0337                     __end_of_mTouch_UpdateBaseline:	
  1620  0337                     __ptext595:	
  1621 ;; =============== function _mTouch_Init ends ============
  1622                           
  1623                           
  1624 ;; *************** function ___bmul *****************
  1625 ;; Defined at:
  1626 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  multiplier      1    wreg     unsigned char 
  1629 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  multiplier      1    2[BANK0 ] unsigned char 
  1632 ;;  product         1    1[BANK0 ] unsigned char 
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      unsigned char 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0
  1637 ;; Tracked objects:
  1638 ;;		On entry : 1F/0
  1639 ;;		On exit  : 1F/0
  1640 ;;		Unchanged: FFFE0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1642 ;;      Params:         0       1       0       0
  1643 ;;      Locals:         0       2       0       0
  1644 ;;      Temps:          0       0       0       0
  1645 ;;      Totals:         0       3       0       0
  1646 ;;Total ram usage:        3 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    3
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_mTouch_ButtonStateMachine
  1653 ;;		_mTouch_Init
  1654 ;;		_mTouch_UpdateBaseline
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657  0337                     ___bmul:	
  1658                           
  1659                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1660                           ;___bmul@multiplier stored from wreg
  1661  0337  00D1               	movwf	___bmul@multiplier
  1662  0338  01D0               	clrf	___bmul@product
  1663  0339                     l23506:	
  1664  0339  084F               	movf	___bmul@multiplicand,w
  1665  033A  1851               	btfsc	___bmul@multiplier,0
  1666  033B  07D0               	addwf	___bmul@product,f
  1667  033C  35CF               	lslf	___bmul@multiplicand,f
  1668  033D  36D1               	lsrf	___bmul@multiplier,f
  1669  033E  08D1               	movf	___bmul@multiplier,f
  1670  033F  1D03               	skipz
  1671  0340  2B39               	goto	l23506
  1672  0341  0850               	movf	___bmul@product,w
  1673  0342  0008               	return
  1674  0343                     __end_of___bmul:	
  1675  0343                     __ptext591:	
  1676 ;; =============== function _main ends ============
  1677                           
  1678                           
  1679 ;; *************** function _mTouch_Decode *****************
  1680 ;; Defined at:
  1681 ;;		line 340 in file "mTouch.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;		None               void
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 1F/0
  1692 ;;		On exit  : 1F/1
  1693 ;;		Unchanged: FFE00/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1695 ;;      Params:         0       0       0       0
  1696 ;;      Locals:         0       0       0       0
  1697 ;;      Temps:          0       0       0       0
  1698 ;;      Totals:         0       0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    5
  1702 ;; This function calls:
  1703 ;;		_mTouch_ButtonStateMachine
  1704 ;;		_mTouch_UpdateBaseline
  1705 ;;		_mTouch_ChangeMode
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710  0343                     _mTouch_Decode:	
  1711                           
  1712                           ;mTouch.c: 345: TMR0IE = 0;;
  1713                           
  1714                           ; Regs used in _mTouch_Decode: [wreg-status,0+pclath+cstack]
  1715  0343  128B               	bcf	11,5
  1716                           
  1717                           ;mTouch.c: 348: mTouch_state.areInitialized = 1;
  1718  0344  14CA               	bsf	_mTouch_state,1
  1719                           
  1720                           ;mTouch.c: 349: mTouch_state.buttonStateChange = 0;
  1721  0345  114A               	bcf	_mTouch_state,2
  1722                           
  1723                           ;mTouch.c: 370: mTouch_currentScan = 0;
  1724  0346  01C8               	clrf	_mTouch_currentScan
  1725                           
  1726                           ;mTouch.c: 426: mTouch_currentScan = 0;
  1727  0347  01C8               	clrf	_mTouch_currentScan
  1728  0348                     l23676:	
  1729                           
  1730                           ;mTouch.c: 432: {
  1731                           ;mTouch.c: 438: if (mTouch_ButtonStateMachine())
  1732  0348  235E  3181         	fcall	_mTouch_ButtonStateMachine
  1733  034A  3A00               	xorlw	0
  1734  034B  1903               	skipnz
  1735  034C  2B4F               	goto	l23680
  1736                           
  1737                           ;mTouch.c: 443: {
  1738                           ;mTouch.c: 444: mTouch_UpdateBaseline();
  1739  034D  2282  3181         	fcall	_mTouch_UpdateBaseline
  1740  034F                     l23680:	
  1741                           
  1742                           ;mTouch.c: 445: }
  1743                           ;mTouch.c: 448: mTouch_currentScan++;
  1744  034F  0AC8               	incf	_mTouch_currentScan,f
  1745                           
  1746                           ;mTouch.c: 449: } while (mTouch_currentScan != 5);
  1747  0350  0848               	movf	_mTouch_currentScan,w
  1748  0351  3A05               	xorlw	5
  1749  0352  1D03               	skipz
  1750  0353  2B48               	goto	l23676
  1751                           
  1752                           ;mTouch.c: 515: mTouch_ChangeMode();
  1753  0354  2358               	fcall	_mTouch_ChangeMode
  1754                           
  1755                           ;mTouch.c: 521: TMR0IF = 0; TMR0IE = 1;;
  1756  0355  110B               	bcf	11,2
  1757  0356  168B               	bsf	11,5
  1758  0357  0008               	return
  1759  0358                     __end_of_mTouch_Decode:	
  1760  0358                     __ptext597:	
  1761 ;; =============== function _Example_System_Init ends ============
  1762                           
  1763                           
  1764 ;; *************** function _mTouch_ChangeMode *****************
  1765 ;; Defined at:
  1766 ;;		line 470 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;		None               void
  1773 ;; Registers used:
  1774 ;;		wreg, status,2
  1775 ;; Tracked objects:
  1776 ;;		On entry : 1F/0
  1777 ;;		On exit  : 1F/1
  1778 ;;		Unchanged: FFFE0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1780 ;;      Params:         0       0       0       0
  1781 ;;      Locals:         0       0       0       0
  1782 ;;      Temps:          0       0       0       0
  1783 ;;      Totals:         0       0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    3
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_mTouch_Init
  1791 ;;		_mTouch_Decode
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794  0358                     _mTouch_ChangeMode:	
  1795  0358  301E               	movlw	30
  1796                           
  1797                           ;cas16f1933.h: 472: mTouch_currentAcqData = 0;
  1798                           
  1799                           ; Regs used in _mTouch_ChangeMode: [wreg+status,2]
  1800  0359  01FD               	clrf	_mTouch_currentAcqData
  1801                           
  1802                           ;cas16f1933.h: 491: mTouch_currentScan = 0;
  1803  035A  01C8               	clrf	_mTouch_currentScan
  1804                           
  1805                           ;cas16f1933.h: 509: mTouch_stateVars.sampleCounter = 30;
  1806  035B  0021               	movlb	1	; select bank1
  1807  035C  00A0               	movwf	_mTouch_stateVars^(0+128)
  1808  035D  0008               	return
  1809  035E                     __end_of_mTouch_ChangeMode:	
  1810  035E                     __ptext593:	
  1811 ;; =============== function _mTouch_UpdateBaseline ends ============
  1812                           
  1813                           
  1814 ;; *************** function _mTouch_ButtonStateMachine *****************
  1815 ;; Defined at:
  1816 ;;		line 528 in file "mTouch.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  delta           2    5[BANK0 ] unsigned int 
  1821 ;;  sensor          1    7[BANK0 ] PTR struct .
  1822 ;;		 -> mTouch_stateVars(26), 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      unsigned char 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 1F/0
  1829 ;;		On exit  : 1F/0
  1830 ;;		Unchanged: FFFE0/0
  1831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1832 ;;      Params:         0       0       0       0
  1833 ;;      Locals:         0       3       0       0
  1834 ;;      Temps:          0       2       0       0
  1835 ;;      Totals:         0       5       0       0
  1836 ;;Total ram usage:        5 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    4
  1839 ;; This function calls:
  1840 ;;		___bmul
  1841 ;; This function is called by:
  1842 ;;		_mTouch_Decode
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845  035E                     _mTouch_ButtonStateMachine:	
  1846                           
  1847                           ;mTouch.c: 543: mTouch_SensorVariables* sensor = &mTouch_stateVars.sensor[mTouch_current
      +                          Scan];
  1848                           
  1849                           ; Regs used in _mTouch_ButtonStateMachine: [wreg-status,0+pclath+cstack]
  1850  035E  3005               	movlw	5
  1851  035F  00CF               	movwf	?___bmul
  1852  0360  0848               	movf	_mTouch_currentScan,w
  1853  0361  2337  3181         	fcall	___bmul
  1854  0363  3EA1               	addlw	(_mTouch_stateVars+1)& (0+255)
  1855  0364  00D6               	movwf	mTouch_ButtonStateMachine@sensor
  1856                           
  1857                           ;mTouch.c: 551: uint16_t delta = mTouch_sensorData[mTouch_currentScan] - mTouch_average[
      +                          mTouch_currentScan];
  1858  0365  3548               	lslf	_mTouch_currentScan,w
  1859  0366  3E20               	addlw	_mTouch_average& (0+255)
  1860  0367  0086               	movwf	6
  1861  0368  0187               	clrf	7
  1862  0369  3548               	lslf	_mTouch_currentScan,w
  1863  036A  3E2A               	addlw	_mTouch_sensorData& (0+255)
  1864  036B  0084               	movwf	4
  1865  036C  0185               	clrf	5
  1866  036D  3F40               	moviw [0]fsr1
  1867  036E  0200               	subwf	0,w
  1868  036F  00D4               	movwf	mTouch_ButtonStateMachine@delta
  1869  0370  3101               	addfsr 0,1
  1870  0371  3F41               	moviw [1]fsr1
  1871  0372  3B00               	subwfb	0,w
  1872  0373  00D5               	movwf	mTouch_ButtonStateMachine@delta+1
  1873                           
  1874                           ;mTouch.c: 553: if ((int16_t) delta < 0)
  1875  0374  1FD5               	btfss	mTouch_ButtonStateMachine@delta+1,7
  1876  0375  2BEA               	goto	l23646
  1877                           
  1878                           ;mTouch.c: 554: {
  1879                           ;mTouch.c: 555: delta = 0;
  1880  0376  01D4               	clrf	mTouch_ButtonStateMachine@delta
  1881  0377  01D5               	clrf	mTouch_ButtonStateMachine@delta+1
  1882  0378  2BEA               	goto	l23646
  1883  0379                     l23586:	
  1884                           
  1885                           ;mTouch.c: 620: {
  1886                           ;mTouch.c: 621: if (--((*sensor).timer) <= 0)
  1887  0379  2409  3181         	fcall	PL3	;call to abstracted procedure
  1888  037B  1D03               	skipz
  1889  037C  2B83               	goto	l9203
  1890                           
  1891                           ;mTouch.c: 622: {
  1892                           ;mTouch.c: 627: (*sensor).state = MTOUCH_RELEASED;
  1893  037D  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  1894  037E  2442  3181         	fcall	PL11	;call to abstracted procedure
  1895                           
  1896                           ;mTouch.c: 629: mTouch_average[mTouch_currentScan] = mTouch_sensorData[mTouch_currentSca
      +                          n];
  1897                           
  1898                           ;mTouch.c: 632: (*sensor).debounce = 2;
  1899  0380  23F7  3181         	fcall	PL2	;call to abstracted procedure
  1900  0382  2BE6               	goto	L5
  1901  0383                     l9203:	
  1902                           ;mTouch.c: 635: }
  1903                           
  1904                           
  1905                           ;mTouch.c: 636: else
  1906                           ;mTouch.c: 637: {
  1907                           ;mTouch.c: 639: mTouch_state.areInitialized = 0;
  1908  0383  10CA               	bcf	_mTouch_state,1
  1909  0384  3400               	retlw	0
  1910  0385                     L6:	
  1911                           ;mTouch.c: 674: {
  1912                           ;mTouch.c: 686: if ((*sensor).debounce == 0)
  1913                           
  1914  0385  244F  3181         	fcall	PL13	;call to abstracted procedure
  1915  0387  1D03               	skipz
  1916  0388  2B97               	goto	l23604
  1917                           
  1918                           ;mTouch.c: 687: {
  1919                           ;mTouch.c: 688: (*sensor).debounce = 2;
  1920  0389  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  1921  038A  3E04               	addlw	4
  1922                           
  1923                           ;mTouch.c: 694: (*sensor).state = MTOUCH_PRESSED;
  1924  038B  2426  3181         	fcall	PL6	;call to abstracted procedure
  1925                           
  1926                           ;mTouch.c: 698: (*sensor).timer = 3000;
  1927  038D  2426  3181         	fcall	PL6	;call to abstracted procedure
  1928  038F  3E02               	addlw	2
  1929  0390  0086               	movwf	6
  1930  0391  30B8               	movlw	184
  1931  0392  3FC0               	movwi [0]fsr1
  1932  0393  300B               	movlw	11
  1933  0394  3FC1               	movwi [1]fsr1
  1934  0395                     l23602:	
  1935                           
  1936                           ;mTouch.c: 710: mTouch_state.buttonStateChange = 1;
  1937  0395  154A               	bsf	_mTouch_state,2
  1938                           
  1939                           ;mTouch.c: 714: }
  1940  0396  3400               	retlw	0
  1941  0397                     l23604:	
  1942                           
  1943                           ;mTouch.c: 715: else
  1944                           ;mTouch.c: 716: {
  1945                           ;mTouch.c: 717: (*sensor).debounce--;
  1946  0397  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  1947  0398  244F               	fcall	PL13	;call to abstracted procedure
  1948  0399  00D2               	movwf	??_mTouch_ButtonStateMachine
  1949  039A  03D2               	decf	??_mTouch_ButtonStateMachine,f
  1950  039B  0801               	movf	1,w
  1951  039C  0652               	xorwf	??_mTouch_ButtonStateMachine,w
  1952  039D  39FC               	andlw	-4
  1953  039E  0652               	xorwf	??_mTouch_ButtonStateMachine,w
  1954  039F                     L3:	
  1955  039F  0081               	movwf	1
  1956  03A0                     l23590:	
  1957                           
  1958                           ;mTouch.c: 645: }
  1959                           ;mTouch.c: 647: return 0;
  1960  03A0  3400               	retlw	0
  1961  03A1                     l23594:	
  1962                           
  1963                           ;mTouch.c: 671: {
  1964                           ;mTouch.c: 673: if(delta > (int16_t)mTouch_pressThreshold[mTouch_currentScan])
  1965  03A1  242D  3181         	fcall	PL8	;call to abstracted procedure
  1966  03A3  00D2               	movwf	??_mTouch_ButtonStateMachine
  1967  03A4  3F01               	moviw [1]fsr0
  1968  03A5  00D3               	movwf	??_mTouch_ButtonStateMachine+1
  1969  03A6  0855               	movf	mTouch_ButtonStateMachine@delta+1,w
  1970  03A7  0253               	subwf	??_mTouch_ButtonStateMachine+1,w
  1971  03A8  1D03               	skipz
  1972  03A9  2BAC               	goto	u1755
  1973  03AA  0854               	movf	mTouch_ButtonStateMachine@delta,w
  1974  03AB  0252               	subwf	??_mTouch_ButtonStateMachine,w
  1975  03AC                     u1755:	
  1976                           
  1977                           ;mTouch.c: 732: else
  1978                           ;mTouch.c: 733: {
  1979                           ;mTouch.c: 735: (*sensor).debounce = 2;
  1980  03AC  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  1981  03AD  1C03               	btfss	3,0
  1982  03AE  2B85               	goto	L6
  1983  03AF  3E04               	addlw	4
  1984  03B0  0086               	movwf	6
  1985  03B1  0187               	clrf	7
  1986  03B2  0801               	movf	1,w
  1987  03B3  39FC               	andlw	-4
  1988  03B4  3802               	iorlw	2
  1989  03B5  0081               	movwf	1
  1990                           
  1991                           ;mTouch.c: 743: return 1;
  1992  03B6  3401               	retlw	1
  1993  03B7                     l23616:	
  1994                           
  1995                           ;mTouch.c: 780: {
  1996                           ;mTouch.c: 785: if (--((*sensor).timer) <= 0)
  1997  03B7  2409  3181         	fcall	PL3	;call to abstracted procedure
  1998  03B9  1D03               	skipz
  1999  03BA  2BC7               	goto	l23628
  2000                           
  2001                           ;mTouch.c: 786: {
  2002                           ;mTouch.c: 790: (*sensor).state = MTOUCH_RELEASED;
  2003  03BB  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2004  03BC  2442  3181         	fcall	PL11	;call to abstracted procedure
  2005                           
  2006                           ;mTouch.c: 791: (*sensor).timeout = 1;
  2007  03BE  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2008  03BF  0086               	movwf	6
  2009  03C0  1581               	bsf	1,3
  2010                           
  2011                           ;mTouch.c: 793: mTouch_average[mTouch_currentScan] = mTouch_sensorData[mTouch_currentSca
      +                          n];
  2012                           
  2013                           ;mTouch.c: 796: (*sensor).debounce = 2;
  2014  03C1  23F7  3181         	fcall	PL2	;call to abstracted procedure
  2015  03C3  0801               	movf	1,w
  2016  03C4  39FC               	andlw	-4
  2017  03C5  3802               	iorlw	2
  2018  03C6  2BE1               	goto	L4
  2019  03C7                     l23628:	
  2020                           
  2021                           ;mTouch.c: 803: }
  2022                           ;mTouch.c: 810: if (delta < (int16_t)mTouch_releaseThreshold[mTouch_currentScan])
  2023  03C7  2434  3181         	fcall	PL9	;call to abstracted procedure
  2024  03C9  00D2               	movwf	??_mTouch_ButtonStateMachine
  2025  03CA  3F01               	moviw [1]fsr0
  2026  03CB  00D3               	movwf	??_mTouch_ButtonStateMachine+1
  2027  03CC  0255               	subwf	mTouch_ButtonStateMachine@delta+1,w
  2028  03CD  1D03               	skipz
  2029  03CE  2BD1               	goto	u1785
  2030  03CF  0852               	movf	??_mTouch_ButtonStateMachine,w
  2031  03D0  0254               	subwf	mTouch_ButtonStateMachine@delta,w
  2032  03D1                     u1785:	
  2033                           
  2034                           ;mTouch.c: 816: {
  2035                           ;mTouch.c: 819: if ((*sensor).debounce == 0)
  2036  03D1  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2037  03D2  1803               	skipnc
  2038  03D3  2BE3               	goto	L7
  2039  03D4  3E04               	addlw	4
  2040  03D5  2455  3181         	fcall	PL15	;call to abstracted procedure
  2041  03D7  1D03               	skipz
  2042  03D8  2B97               	goto	l23604
  2043                           
  2044                           ;mTouch.c: 820: {
  2045                           ;mTouch.c: 821: (*sensor).debounce = 2;
  2046  03D9  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2047  03DA  3E04               	addlw	4
  2048                           
  2049                           ;mTouch.c: 827: (*sensor).state = MTOUCH_RELEASED;
  2050  03DB  2426  3181         	fcall	PL6	;call to abstracted procedure
  2051  03DD  0086               	movwf	6
  2052  03DE  0801               	movf	1,w
  2053  03DF  39FC               	andlw	-4
  2054  03E0  3801               	iorlw	1
  2055  03E1                     L4:	
  2056  03E1  0081               	movwf	1
  2057  03E2  2B95               	goto	l23602
  2058  03E3                     L7:	
  2059                           ;mTouch.c: 845: else
  2060                           ;mTouch.c: 846: {
  2061                           ;mTouch.c: 849: (*sensor).debounce = 2;
  2062                           
  2063  03E3  3E04               	addlw	4
  2064  03E4  0086               	movwf	6
  2065  03E5  0187               	clrf	7
  2066  03E6                     L5:	
  2067  03E6  0801               	movf	1,w
  2068  03E7  39FC               	andlw	-4
  2069  03E8  3802               	iorlw	2
  2070  03E9  2B9F               	goto	L3
  2071  03EA                     l23646:	
  2072  03EA  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2073  03EB  2455  3181         	fcall	PL15	;call to abstracted procedure
  2074                           
  2075                           ; Switch size 1, requested type "space"
  2076                           ; Number of cases is 3, Range of values is 0 to 2
  2077                           ; switch strategies available:
  2078                           ; Name         Instructions Cycles
  2079                           ; simple_byte           10     6 (average)
  2080                           ; direct_byte           12     6 (fixed)
  2081                           ; jumptable            260     6 (fixed)
  2082                           ; rangetable             7     4 (fixed)
  2083                           ; spacedrange           11     6 (fixed)
  2084                           ; locatedrange           3     3 (fixed)
  2085                           ;	Chosen strategy is simple_byte
  2086  03ED  1903               	skipnz
  2087  03EE  2B79               	goto	l23586
  2088  03EF  3A01               	xorlw	1	; case 1
  2089  03F0  1903               	skipnz
  2090  03F1  2BA1               	goto	l23594
  2091  03F2  3A03               	xorlw	3	; case 2
  2092  03F3  1903               	skipnz
  2093  03F4  2BB7               	goto	l23616
  2094  03F5  2BA0               	goto	l23590
  2095  03F6  0008               	return
  2096  03F7                     __end_of_mTouch_ButtonStateMachine:	
  2097  03F7                     PL2:	
  2098  03F7  3548               	lslf	_mTouch_currentScan,w
  2099  03F8  3E2A               	addlw	_mTouch_sensorData& (0+255)
  2100  03F9  0086               	movwf	6
  2101  03FA  3F40               	moviw [0]fsr1
  2102  03FB  00D2               	movwf	??_mTouch_ButtonStateMachine
  2103  03FC  3F41               	moviw [1]fsr1
  2104  03FD  00D3               	movwf	??_mTouch_ButtonStateMachine+1
  2105  03FE  3548               	lslf	_mTouch_currentScan,w
  2106  03FF  3E20               	addlw	_mTouch_average& (0+255)
  2107  0400  0086               	movwf	6
  2108  0401  0852               	movf	??_mTouch_ButtonStateMachine,w
  2109  0402  3FC0               	movwi [0]fsr1
  2110  0403  0853               	movf	??_mTouch_ButtonStateMachine+1,w
  2111  0404  3FC1               	movwi [1]fsr1
  2112  0405  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2113  0406  3E04               	addlw	4
  2114  0407  0086               	movwf	6
  2115  0408  0008               	return
  2116  0409                     PL3:	
  2117  0409  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2118  040A  3E02               	addlw	2
  2119  040B  0086               	movwf	6
  2120  040C  3001               	movlw	1
  2121  040D  0187               	clrf	7
  2122  040E  0281               	subwf	1,f
  2123  040F  3141               	addfsr 1,1
  2124  0410  3000               	movlw	0
  2125  0411  3B81               	subwfb	1,f
  2126  0412  317F               	addfsr 1,-1
  2127  0413  0016               	moviw fsr1++
  2128  0414  0401               	iorwf	1,w
  2129  0415  0008               	return
  2130  0416                     PL4:	
  2131  0416  3903               	andlw	3
  2132  0417  0020               	movlb	0	; select bank0
  2133  0418  00DB               	movwf	??_main
  2134  0419  3002               	movlw	2
  2135  041A  025B               	subwf	??_main,w
  2136  041B  0008               	return
  2137  041C                     PL5:	
  2138  041C  36D3               	lsrf	??_mTouch_UpdateBaseline+1,f
  2139  041D  0CD2               	rrf	??_mTouch_UpdateBaseline,f
  2140  041E  36D3               	lsrf	??_mTouch_UpdateBaseline+1,f
  2141  041F  0CD2               	rrf	??_mTouch_UpdateBaseline,f
  2142  0420  36D3               	lsrf	??_mTouch_UpdateBaseline+1,f
  2143  0421  0CD2               	rrf	??_mTouch_UpdateBaseline,f
  2144  0422  3548               	lslf	_mTouch_currentScan,w
  2145  0423  3E20               	addlw	_mTouch_average& (0+255)
  2146  0424  0086               	movwf	6
  2147  0425  0008               	return
  2148  0426                     PL6:	
  2149  0426  0086               	movwf	6
  2150  0427  0801               	movf	1,w
  2151  0428  39FC               	andlw	-4
  2152  0429  3802               	iorlw	2
  2153  042A  0081               	movwf	1
  2154  042B  0856               	movf	mTouch_ButtonStateMachine@sensor,w
  2155  042C  0008               	return
  2156  042D                     PL8:	
  2157  042D  3548               	lslf	_mTouch_currentScan,w
  2158  042E  3E70               	addlw	low (_mTouch_pressThreshold| (0+32768))
  2159  042F  0084               	movwf	4
  2160  0430  3080               	movlw	high (_mTouch_pressThreshold| (0+32768))
  2161  0431  0085               	movwf	5
  2162  0432  3F00               	moviw [0]fsr0
  2163  0433  0008               	return
  2164  0434                     PL9:	
  2165  0434  3548               	lslf	_mTouch_currentScan,w
  2166  0435  3E7A               	addlw	low (_mTouch_releaseThreshold| (0+32768))
  2167  0436  0084               	movwf	4
  2168  0437  3080               	movlw	high (_mTouch_releaseThreshold| (0+32768))
  2169  0438  0085               	movwf	5
  2170  0439  3F00               	moviw [0]fsr0
  2171  043A  0008               	return
  2172  043B                     PL10:	
  2173  043B  3E20               	addlw	_mTouch_average& (0+255)
  2174  043C  0086               	movwf	6
  2175  043D  3F40               	moviw [0]fsr1
  2176  043E  00D2               	movwf	??_mTouch_UpdateBaseline
  2177  043F  3F41               	moviw [1]fsr1
  2178  0440  00D3               	movwf	??_mTouch_UpdateBaseline+1
  2179  0441  0008               	return
  2180  0442                     PL11:	
  2181  0442  0086               	movwf	6
  2182  0443  0187               	clrf	7
  2183  0444  0801               	movf	1,w
  2184  0445  39FC               	andlw	-4
  2185  0446  3801               	iorlw	1
  2186  0447  0081               	movwf	1
  2187  0448  0008               	return
  2188  0449                     PL12:	
  2189  0449  3EA2               	addlw	(_mTouch_stateVars+2)& (0+255)
  2190  044A  0086               	movwf	6
  2191  044B  30FF               	movlw	255
  2192  044C  0187               	clrf	7
  2193  044D  0481               	iorwf	1,f
  2194  044E  0008               	return
  2195  044F                     PL13:	
  2196  044F  3E04               	addlw	4
  2197  0450  0086               	movwf	6
  2198  0451  0187               	clrf	7
  2199  0452  0801               	movf	1,w
  2200  0453  3903               	andlw	3
  2201  0454  0008               	return
  2202  0455                     PL15:	
  2203  0455  0086               	movwf	6
  2204  0456  0187               	clrf	7
  2205  0457  0801               	movf	1,w
  2206  0458  3903               	andlw	3
  2207  0459  0008               	return
  2208                           
  2209                           	psect	bitbssCOMMON
  2210  03D0                     __pbitbssCOMMON:	
  2211  03D0                     _flag_heat:	
  2212  03D0                     	ds	1
  2213  03D1                     _flag_led_enable:	
  2214  03D1                     	ds	1
  2215  03D2                     _flag_light:	
  2216  03D2                     	ds	1
  2217  03D3                     _flag_massage:	
  2218  03D3                     	ds	1
  2219  03D4                     _flag_pr_close:	
  2220  03D4                     	ds	1
  2221  03D5                     _flag_pr_open:	
  2222  03D5                     	ds	1
  2223  03D6                     _led_enable:	
  2224  03D6                     	ds	1
  2225                           
  2226                           	psect	bssCOMMON
  2227  007B                     __pbssCOMMON:	
  2228  007B                     _Key_LED:	
  2229  007B                     	ds	1
  2230  007C                     _LedPwmCount:	
  2231  007C                     	ds	1
  2232  007D                     _mTouch_currentAcqData:	
  2233  007D                     	ds	1
  2234                           
  2235                           	psect	bssBANK0
  2236  0020                     __pbssBANK0:	
  2237  0020                     _mTouch_average:	
  2238  0020                     	ds	10
  2239  002A                     _mTouch_sensorData:	
  2240  002A                     	ds	10
  2241  0034                     _heatTimer:	
  2242  0034                     	ds	2
  2243  0036                     _ledTimer:	
  2244  0036                     	ds	2
  2245  0038                     _lightTimer:	
  2246  0038                     	ds	2
  2247  003A                     _mTouch_lastResult:	
  2248  003A                     	ds	2
  2249  003C                     _massageTimer:	
  2250  003C                     	ds	2
  2251  003E                     _prCloseDelay:	
  2252  003E                     	ds	2
  2253  0040                     _prOpenDelay:	
  2254  0040                     	ds	2
  2255  0042                     _secondTimer:	
  2256  0042                     	ds	2
  2257  0044                     _Key_state:	
  2258  0044                     	ds	1
  2259  0045                     _heatIntensity:	
  2260  0045                     	ds	1
  2261  0046                     _heatLedIntensity:	
  2262  0046                     	ds	1
  2263  0047                     _heatState:	
  2264  0047                     	ds	1
  2265  0048                     _mTouch_currentScan:	
  2266  0048                     	ds	1
  2267  0049                     _mTouch_delayCount:	
  2268  0049                     	ds	1
  2269  004A                     _mTouch_state:	
  2270  004A                     	ds	1
  2271  004B                     _massageIntensity:	
  2272  004B                     	ds	1
  2273  004C                     _massageLedIntensity:	
  2274  004C                     	ds	1
  2275  004D                     _massageState:	
  2276  004D                     	ds	1
  2277  004E                     _outputPwmCount:	
  2278  004E                     	ds	1
  2279                           
  2280                           	psect	dataBANK0
  2281  005C                     __pdataBANK0:	
  2282  005C                     _mTouch_jitter:	
  2283  005C                     	ds	1
  2284                           
  2285                           	psect	bssBANK1
  2286  00A0                     __pbssBANK1:	
  2287  00A0                     _mTouch_stateVars:	
  2288  00A0                     	ds	26
  2289  00BA                     _mTouch_acqData:	
  2290  00BA                     	ds	20
  2291                           
  2292                           	psect	clrtext
  2293  073F                     clear_ram:	
  2294                           ;	Called with FSR0 containing the base address, and
  2295                           ;	WREG with the size to clear
  2296                           
  2297  073F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2298  0740                     clrloop:	
  2299  0740  0180               	clrf	0	;clear RAM location pointed to by FSR
  2300  0741  3101               	addfsr 0,1
  2301  0742  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2302  0743  2F40               	goto	clrloop	;have we reached the end yet?
  2303  0744  3400               	retlw	0	;all done for this memory range, return
  2304                           
  2305                           	psect	cstackCOMMON
  2306  0070                     __pcstackCOMMON:	
  2307  0070                     ?_mTouch_ChangeMode:	
  2308  0070                     ?_mTouch_UpdateBaseline:	
  2309                           ; 0 bytes @ 0x0
  2310                           
  2311  0070                     ?_mTouch_ScanA_0:	
  2312                           ; 0 bytes @ 0x0
  2313                           
  2314  0070                     ??_mTouch_ScanA_0:	
  2315                           ; 0 bytes @ 0x0
  2316                           
  2317  0070                     ?_mTouch_ScanA_1:	
  2318                           ; 0 bytes @ 0x0
  2319                           
  2320  0070                     ??_mTouch_ScanA_1:	
  2321                           ; 0 bytes @ 0x0
  2322                           
  2323  0070                     ?_mTouch_ScanA_2:	
  2324                           ; 0 bytes @ 0x0
  2325                           
  2326  0070                     ??_mTouch_ScanA_2:	
  2327                           ; 0 bytes @ 0x0
  2328                           
  2329  0070                     ?_mTouch_ScanA_3:	
  2330                           ; 0 bytes @ 0x0
  2331                           
  2332  0070                     ??_mTouch_ScanA_3:	
  2333                           ; 0 bytes @ 0x0
  2334                           
  2335  0070                     ?_mTouch_ScanA_4:	
  2336                           ; 0 bytes @ 0x0
  2337                           
  2338  0070                     ??_mTouch_ScanA_4:	
  2339                           ; 0 bytes @ 0x0
  2340                           
  2341  0070                     ?_mTouch_ScanB_0:	
  2342                           ; 0 bytes @ 0x0
  2343                           
  2344  0070                     ??_mTouch_ScanB_0:	
  2345                           ; 0 bytes @ 0x0
  2346                           
  2347  0070                     ?_mTouch_ScanB_1:	
  2348                           ; 0 bytes @ 0x0
  2349                           
  2350  0070                     ??_mTouch_ScanB_1:	
  2351                           ; 0 bytes @ 0x0
  2352                           
  2353  0070                     ?_mTouch_ScanB_2:	
  2354                           ; 0 bytes @ 0x0
  2355                           
  2356  0070                     ??_mTouch_ScanB_2:	
  2357                           ; 0 bytes @ 0x0
  2358                           
  2359  0070                     ?_mTouch_ScanB_3:	
  2360                           ; 0 bytes @ 0x0
  2361                           
  2362  0070                     ??_mTouch_ScanB_3:	
  2363                           ; 0 bytes @ 0x0
  2364                           
  2365  0070                     ?_mTouch_ScanB_4:	
  2366                           ; 0 bytes @ 0x0
  2367                           
  2368  0070                     ??_mTouch_ScanB_4:	
  2369                           ; 0 bytes @ 0x0
  2370                           
  2371  0070                     ?_mTouch_WaitForGoDone:	
  2372                           ; 0 bytes @ 0x0
  2373                           
  2374  0070                     ??_mTouch_WaitForGoDone:	
  2375                           ; 0 bytes @ 0x0
  2376                           
  2377  0070                     ?_mTouch_StoreScanA:	
  2378                           ; 0 bytes @ 0x0
  2379                           
  2380  0070                     ??_mTouch_StoreScanA:	
  2381                           ; 0 bytes @ 0x0
  2382                           
  2383  0070                     ?_mTouch_StoreScanB:	
  2384                           ; 0 bytes @ 0x0
  2385                           
  2386  0070                     ??_mTouch_StoreScanB:	
  2387                           ; 0 bytes @ 0x0
  2388                           
  2389  0070                     ?_mTouch_DecimationFilter:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0070                     ??_mTouch_DecimationFilter:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0070                     ?_Example_System_Init:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0070                     ?_KeyExecute:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0070                     ?_IchOutputs:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0070                     ??_IchOutputs:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0070                     ?_IchLeds:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0070                     ??_IchLeds:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0070                     ?_mTouch_Init:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0070                     ?_mTouch_Decode:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0070                     ?_mTouch_Scan:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0070                     ?_main:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0070                     ?_ISR:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0070                     ?i1_mTouch_ChangeMode:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0070                     ??i1_mTouch_ChangeMode:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0070                     ?_mTouch_ButtonStateMachine:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437                           
  2438                           ; 1 bytes @ 0x0
  2439  0070                     	ds	5
  2440  0075                     mTouch_DecimationFilter@result:	
  2441                           
  2442                           ; 2 bytes @ 0x5
  2443  0075                     	ds	2
  2444  0077                     ??_mTouch_Scan:	
  2445                           
  2446                           ; 0 bytes @ 0x7
  2447  0077                     	ds	2
  2448  0079                     ??_ISR:	
  2449                           
  2450                           ; 0 bytes @ 0x9
  2451  0079                     	ds	1
  2452                           
  2453                           	psect	cstackBANK0
  2454  004F                     __pcstackBANK0:	
  2455  004F                     ??_mTouch_ChangeMode:	
  2456  004F                     ??_Example_System_Init:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  004F                     ??_KeyExecute:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  004F                     ?___bmul:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  004F                     ___bmul@multiplicand:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468                           
  2469                           ; 1 bytes @ 0x0
  2470  004F                     	ds	1
  2471  0050                     ??___bmul:	
  2472  0050                     ___bmul@product:	
  2473                           ; 0 bytes @ 0x1
  2474                           
  2475                           
  2476                           ; 1 bytes @ 0x1
  2477  0050                     	ds	1
  2478  0051                     ___bmul@multiplier:	
  2479                           
  2480                           ; 1 bytes @ 0x2
  2481  0051                     	ds	1
  2482  0052                     ??_mTouch_ButtonStateMachine:	
  2483  0052                     ??_mTouch_UpdateBaseline:	
  2484                           ; 0 bytes @ 0x3
  2485                           
  2486  0052                     ??_mTouch_Init:	
  2487                           ; 0 bytes @ 0x3
  2488                           
  2489  0052                     mTouch_Init@acqData:	
  2490                           ; 0 bytes @ 0x3
  2491                           
  2492                           
  2493                           ; 1 bytes @ 0x3
  2494  0052                     	ds	1
  2495  0053                     mTouch_Init@sensorIndex:	
  2496                           
  2497                           ; 1 bytes @ 0x4
  2498  0053                     	ds	1
  2499  0054                     mTouch_ButtonStateMachine@delta:	
  2500                           
  2501                           ; 2 bytes @ 0x5
  2502  0054                     	ds	2
  2503  0056                     mTouch_ButtonStateMachine@sensor:	
  2504                           
  2505                           ; 1 bytes @ 0x7
  2506  0056                     	ds	3
  2507  0059                     mTouch_UpdateBaseline@reading:	
  2508                           
  2509                           ; 2 bytes @ 0xA
  2510  0059                     	ds	2
  2511  005B                     ??_mTouch_Decode:	
  2512  005B                     ??_main:	
  2513                           ; 0 bytes @ 0xC
  2514                           
  2515                           
  2516                           ; 0 bytes @ 0xC
  2517  005B                     	ds	1
  2518                           
  2519                           	psect	intentry
  2520  0004                     __pintentry:	
  2521 ;; =============== function _KeyExecute ends ============
  2522                           
  2523                           
  2524 ;; *************** function _ISR *****************
  2525 ;; Defined at:
  2526 ;;		line 219 in file "main.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;		None
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;		None
  2531 ;; Return value:  Size  Location     Type
  2532 ;;		None               void
  2533 ;; Registers used:
  2534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 1F/0
  2538 ;;		Unchanged: FFE00/0
  2539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2540 ;;      Params:         0       0       0       0
  2541 ;;      Locals:         0       0       0       0
  2542 ;;      Temps:          1       0       0       0
  2543 ;;      Totals:         1       0       0       0
  2544 ;;Total ram usage:        1 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    2
  2547 ;; This function calls:
  2548 ;;		_IchLeds
  2549 ;;		_IchOutputs
  2550 ;;		_mTouch_Scan
  2551 ;; This function is called by:
  2552 ;;		Interrupt level 1
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555  0004                     _ISR:	
  2556                           
  2557                           ; Regs used in _ISR: [wreg+fsr1l-status,0+pclath+cstack]
  2558  0004  3180               	pagesel	$
  2559  0005  0020               	movlb	0	; select bank0
  2560  0006  087F               	movf	127,w
  2561  0007  00F9               	movwf	??_ISR
  2562                           
  2563                           ;main.c: 220: if (TMR2IF)
  2564  0008  1891               	btfsc	17,1
  2565                           
  2566                           ;main.c: 221: {
  2567                           ;main.c: 223: TMR2IF = 0;
  2568  0009  1091               	bcf	17,1
  2569                           
  2570                           ;main.c: 224: }
  2571                           ;main.c: 226: if (T0IF)
  2572  000A  1D0B               	btfss	11,2
  2573  000B  2868               	goto	i1l20335
  2574                           
  2575                           ;main.c: 227: {
  2576                           ;main.c: 228: IchLeds();
  2577  000C  3185  2558  3180   	fcall	_IchLeds
  2578                           
  2579                           ;main.c: 229: IchOutputs();
  2580  000F  3185  25A8  3180   	fcall	_IchOutputs
  2581                           
  2582                           ;main.c: 230: if(prOpenDelay){
  2583  0012  0020               	movlb	0	; select bank0
  2584  0013  0841               	movf	_prOpenDelay+1,w
  2585  0014  0440               	iorwf	_prOpenDelay,w
  2586  0015  1903               	skipnz
  2587  0016  281B               	goto	i1l20322
  2588                           
  2589                           ;main.c: 231: prOpenDelay--;
  2590  0017  3001               	movlw	1
  2591  0018  02C0               	subwf	_prOpenDelay,f
  2592  0019  3000               	movlw	0
  2593  001A  3BC1               	subwfb	_prOpenDelay+1,f
  2594  001B                     i1l20322:	
  2595                           
  2596                           ;main.c: 232: }
  2597                           ;main.c: 233: if(prCloseDelay){
  2598  001B  083F               	movf	_prCloseDelay+1,w
  2599  001C  043E               	iorwf	_prCloseDelay,w
  2600  001D  1903               	skipnz
  2601  001E  2823               	goto	i1l20323
  2602                           
  2603                           ;main.c: 234: prCloseDelay--;
  2604  001F  3001               	movlw	1
  2605  0020  02BE               	subwf	_prCloseDelay,f
  2606  0021  3000               	movlw	0
  2607  0022  3BBF               	subwfb	_prCloseDelay+1,f
  2608  0023                     i1l20323:	
  2609                           
  2610                           ;main.c: 235: }
  2611                           ;main.c: 237: if(secondTimer){
  2612  0023  0843               	movf	_secondTimer+1,w
  2613  0024  0442               	iorwf	_secondTimer,w
  2614  0025  1903               	skipnz
  2615  0026  282C               	goto	i1l23470
  2616                           
  2617                           ;main.c: 238: secondTimer--;
  2618  0027  3001               	movlw	1
  2619  0028  02C2               	subwf	_secondTimer,f
  2620  0029  3000               	movlw	0
  2621  002A  3BC3               	subwfb	_secondTimer+1,f
  2622                           
  2623                           ;main.c: 239: }else{
  2624  002B  2862               	goto	i1l20325
  2625  002C                     i1l23470:	
  2626                           
  2627                           ;main.c: 240: secondTimer = 10050;
  2628  002C  3042               	movlw	66
  2629  002D  00C2               	movwf	_secondTimer
  2630  002E  3027               	movlw	39
  2631  002F  00C3               	movwf	_secondTimer+1
  2632                           
  2633                           ;main.c: 242: if(ledTimer){
  2634  0030  0837               	movf	_ledTimer+1,w
  2635  0031  0436               	iorwf	_ledTimer,w
  2636  0032  1903               	skipnz
  2637  0033  283C               	goto	i1l23478
  2638                           
  2639                           ;main.c: 243: ledTimer--;
  2640  0034  3001               	movlw	1
  2641  0035  02B6               	subwf	_ledTimer,f
  2642  0036  3000               	movlw	0
  2643  0037  3BB7               	subwfb	_ledTimer+1,f
  2644                           
  2645                           ;main.c: 244: if(!ledTimer){
  2646  0038  0837               	movf	_ledTimer+1,w
  2647  0039  0436               	iorwf	_ledTimer,w
  2648  003A  1903               	btfsc	3,2
  2649                           
  2650                           ;main.c: 245: led_enable = 0;
  2651  003B  137A               	bcf	_led_enable/(0+8),_led_enable& (0+7)
  2652  003C                     i1l23478:	
  2653                           
  2654                           ;main.c: 246: }
  2655                           ;main.c: 247: }
  2656                           ;main.c: 249: if(heatTimer){
  2657  003C  0835               	movf	_heatTimer+1,w
  2658  003D  0434               	iorwf	_heatTimer,w
  2659  003E  1903               	skipnz
  2660  003F  284A               	goto	i1l23486
  2661                           
  2662                           ;main.c: 250: heatTimer--;
  2663  0040  3001               	movlw	1
  2664  0041  02B4               	subwf	_heatTimer,f
  2665  0042  3000               	movlw	0
  2666  0043  3BB5               	subwfb	_heatTimer+1,f
  2667                           
  2668                           ;main.c: 251: if(!heatTimer){
  2669  0044  0835               	movf	_heatTimer+1,w
  2670  0045  0434               	iorwf	_heatTimer,w
  2671  0046  1D03               	skipz
  2672  0047  284A               	goto	i1l23486
  2673                           
  2674                           ;main.c: 252: heatState = Key_LED.oneBit.Heat = 0;
  2675  0048  117B               	bcf	_Key_LED,2
  2676  0049  01C7               	clrf	_heatState
  2677  004A                     i1l23486:	
  2678                           
  2679                           ;main.c: 253: }
  2680                           ;main.c: 254: }
  2681                           ;main.c: 256: if(massageTimer){
  2682  004A  083D               	movf	_massageTimer+1,w
  2683  004B  043C               	iorwf	_massageTimer,w
  2684  004C  1903               	skipnz
  2685  004D  2858               	goto	i1l23494
  2686                           
  2687                           ;main.c: 257: massageTimer--;
  2688  004E  3001               	movlw	1
  2689  004F  02BC               	subwf	_massageTimer,f
  2690  0050  3000               	movlw	0
  2691  0051  3BBD               	subwfb	_massageTimer+1,f
  2692                           
  2693                           ;main.c: 258: if(!massageTimer){
  2694  0052  083D               	movf	_massageTimer+1,w
  2695  0053  043C               	iorwf	_massageTimer,w
  2696  0054  1D03               	skipz
  2697  0055  2858               	goto	i1l23494
  2698                           
  2699                           ;main.c: 259: massageState = Key_LED.oneBit.Massage = 0;
  2700  0056  11FB               	bcf	_Key_LED,3
  2701  0057  01CD               	clrf	_massageState
  2702  0058                     i1l23494:	
  2703                           
  2704                           ;main.c: 260: }
  2705                           ;main.c: 261: }
  2706                           ;main.c: 263: if(lightTimer){
  2707  0058  0839               	movf	_lightTimer+1,w
  2708  0059  0438               	iorwf	_lightTimer,w
  2709  005A  1903               	skipnz
  2710  005B  2861               	goto	i1l20332
  2711                           
  2712                           ;main.c: 264: lightTimer--;
  2713  005C  3001               	movlw	1
  2714  005D  02B8               	subwf	_lightTimer,f
  2715  005E  3000               	movlw	0
  2716  005F  3BB9               	subwfb	_lightTimer+1,f
  2717                           
  2718                           ;main.c: 265: }else{
  2719  0060  2862               	goto	i1l20325
  2720  0061                     i1l20332:	
  2721                           
  2722                           ;main.c: 266: Key_LED.oneBit.Light = 0;
  2723  0061  127B               	bcf	_Key_LED,4
  2724  0062                     i1l20325:	
  2725                           
  2726                           ;main.c: 267: }
  2727                           ;main.c: 268: }
  2728                           ;main.c: 303: if ((TMR0IF && TMR0IE))
  2729  0062  190B               	btfsc	11,2
  2730  0063  1E8B               	btfss	11,5
  2731  0064  2867               	goto	i1l23502
  2732                           
  2733                           ;main.c: 304: {
  2734                           ;main.c: 305: mTouch_Scan();
  2735  0065  3184  245A         	fcall	_mTouch_Scan
  2736  0067                     i1l23502:	
  2737                           
  2738                           ;main.c: 307: }
  2739                           ;main.c: 314: T0IF = 0;
  2740  0067  110B               	bcf	11,2
  2741  0068                     i1l20335:	
  2742  0068  0879               	movf	??_ISR,w
  2743  0069  0020               	movlb	0	; select bank0
  2744  006A  00FF               	movwf	127
  2745  006B  0009               	retfie
  2746  006C                     __end_of_ISR:	
  2747                           
  2748                           	psect	text600
  2749  045A                     __ptext600:	
  2750 ;; =============== function _ISR ends ============
  2751                           
  2752                           
  2753 ;; *************** function _mTouch_Scan *****************
  2754 ;; Defined at:
  2755 ;;		line 188 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;		None               void
  2762 ;; Registers used:
  2763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 1F/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: FFE00/0
  2768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2769 ;;      Params:         0       0       0       0
  2770 ;;      Locals:         0       0       0       0
  2771 ;;      Temps:          2       0       0       0
  2772 ;;      Totals:         2       0       0       0
  2773 ;;Total ram usage:        2 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    1
  2776 ;; This function calls:
  2777 ;;		_mTouch_ScanA_4
  2778 ;;		_mTouch_ScanA_3
  2779 ;;		_mTouch_ScanA_2
  2780 ;;		_mTouch_ScanA_1
  2781 ;;		_mTouch_ScanA_0
  2782 ;;		_mTouch_WaitForGoDone
  2783 ;;		_mTouch_StoreScanA
  2784 ;;		_mTouch_ScanB_4
  2785 ;;		_mTouch_ScanB_3
  2786 ;;		_mTouch_ScanB_2
  2787 ;;		_mTouch_ScanB_1
  2788 ;;		_mTouch_ScanB_0
  2789 ;;		_mTouch_StoreScanB
  2790 ;;		_mTouch_DecimationFilter
  2791 ;;		i1_mTouch_ChangeMode
  2792 ;; This function is called by:
  2793 ;;		_ISR
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796  045A                     _mTouch_Scan:	
  2797  045A                     mTouch_Scan:	
  2798                           ; Regs used in _mTouch_Scan: [wreg+fsr1l-status,0+pclath+cstack]
  2799                           
  2800                           
  2801                           ;cas16f1933.h: 220: mTouch_currentAcqData = &mTouch_acqData[mTouch_currentScan];
  2802                           
  2803                           ;#
  2804  045A  254B               	fcall	PL7	;call to abstracted procedure
  2805                           
  2806                           ;cas16f1933.h: 232: mTouch_ScanA[mTouch_currentScan]();
  2807  045B  0848               	movf	_mTouch_currentScan,w
  2808  045C  3E84               	addlw	low (_mTouch_ScanA| (0+32768))
  2809  045D  3180               	movlp	high __stringtab
  2810  045E  000A               	callw
  2811  045F  3181  2101  3184   	fcall	i1fptable
  2812                           
  2813                           ;cas16f1933.h: 238: mTouch_WaitForGoDone();
  2814  0462  24AA  3184         	fcall	_mTouch_WaitForGoDone
  2815                           
  2816                           ;cas16f1933.h: 239: mTouch_StoreScanA();
  2817  0464  24B4               	fcall	_mTouch_StoreScanA
  2818                           
  2819                           ;cas16f1933.h: 245: mTouch_ScanB[mTouch_currentScan]();
  2820  0465  0848               	movf	_mTouch_currentScan,w
  2821  0466  3E89               	addlw	low (_mTouch_ScanB| (0+32768))
  2822  0467  3180               	movlp	high __stringtab
  2823  0468  000A               	callw
  2824  0469  3181  2101  3184   	fcall	i1fptable
  2825                           
  2826                           ;cas16f1933.h: 251: mTouch_WaitForGoDone();
  2827  046C  24AA  3184         	fcall	_mTouch_WaitForGoDone
  2828                           
  2829                           ;cas16f1933.h: 252: mTouch_StoreScanB();
  2830  046E  24C0  3184         	fcall	_mTouch_StoreScanB
  2831                           
  2832                           ;cas16f1933.h: 261: mTouch_DecimationFilter();
  2833  0470  24CE  3184         	fcall	_mTouch_DecimationFilter
  2834                           
  2835                           ;cas16f1933.h: 278: mTouch_currentScan++;
  2836  0472  0AC8               	incf	_mTouch_currentScan,f
  2837                           
  2838                           ;cas16f1933.h: 282: if (mTouch_currentScan == 5)
  2839  0473  0848               	movf	_mTouch_currentScan,w
  2840  0474  3A05               	xorlw	5
  2841  0475  1D03               	skipz
  2842  0476  2C9E               	goto	i1l23356
  2843                           
  2844                           ;cas16f1933.h: 283: {
  2845                           ;cas16f1933.h: 289: mTouch_currentScan = 0;
  2846  0477  01C8               	clrf	_mTouch_currentScan
  2847                           
  2848                           ;cas16f1933.h: 311: if (--mTouch_stateVars.sampleCounter == 0)
  2849  0478  0021               	movlb	1	; select bank1
  2850  0479  0BA0               	decfsz	_mTouch_stateVars^(0+128),f
  2851  047A  2C9E               	goto	i1l23356
  2852                           
  2853                           ;cas16f1933.h: 312: {
  2854                           ;cas16f1933.h: 313: mTouch_stateVars.sampleCounter = 30;
  2855  047B  301E               	movlw	30
  2856  047C  00A0               	movwf	_mTouch_stateVars^(0+128)
  2857  047D                     i1l23344:	
  2858                           
  2859                           ;cas16f1933.h: 318: {
  2860                           ;cas16f1933.h: 319: mTouch_currentAcqData = &mTouch_acqData[mTouch_currentScan];
  2861  047D  254B  3184         	fcall	PL7	;call to abstracted procedure
  2862                           
  2863                           ;cas16f1933.h: 320: mTouch_sensorData[mTouch_currentScan] = (uint16_t)(((uint24_t)((*mTo
      +                          uch_currentAcqData).accumulator.v) & 0xFFFFF) >> 0);
  2864  047F  0086               	movwf	6
  2865  0480  0187               	clrf	7
  2866  0481  3F40               	moviw [0]fsr1
  2867  0482  00F7               	movwf	??_mTouch_Scan
  2868  0483  3F41               	moviw [1]fsr1
  2869  0484  00F8               	movwf	??_mTouch_Scan+1
  2870  0485  3548               	lslf	_mTouch_currentScan,w
  2871  0486  3E2A               	addlw	_mTouch_sensorData& (0+255)
  2872  0487  0086               	movwf	6
  2873  0488  0877               	movf	??_mTouch_Scan,w
  2874  0489  3FC0               	movwi [0]fsr1
  2875  048A  0878               	movf	??_mTouch_Scan+1,w
  2876  048B  3FC1               	movwi [1]fsr1
  2877                           
  2878                           ;cas16f1933.h: 321: (*mTouch_currentAcqData).accumulator.v &= 0xF00000;
  2879  048C  087D               	movf	_mTouch_currentAcqData,w
  2880  048D  0086               	movwf	6
  2881  048E  3000               	movlw	0
  2882  048F  0581               	andwf	1,f
  2883  0490  3141               	addfsr 1,1
  2884  0491  0581               	andwf	1,f
  2885  0492  3141               	addfsr 1,1
  2886  0493  30F0               	movlw	240
  2887  0494  0581               	andwf	1,f
  2888  0495  317E               	addfsr 1,-2
  2889                           
  2890                           ;cas16f1933.h: 323: mTouch_currentScan++;
  2891  0496  0AC8               	incf	_mTouch_currentScan,f
  2892                           
  2893                           ;cas16f1933.h: 324: } while (mTouch_currentScan != 5);
  2894  0497  0848               	movf	_mTouch_currentScan,w
  2895  0498  3A05               	xorlw	5
  2896  0499  1D03               	skipz
  2897  049A  2C7D               	goto	i1l23344
  2898                           
  2899                           ;cas16f1933.h: 333: mTouch_ChangeMode();
  2900  049B  2545               	fcall	i1_mTouch_ChangeMode
  2901                           
  2902                           ;cas16f1933.h: 335: mTouch_state.dataReady = 1;
  2903  049C  0020               	movlb	0	; select bank0
  2904  049D  144A               	bsf	_mTouch_state,0
  2905  049E                     i1l23356:	
  2906  049E  0020               	banksel	_mTouch_jitter	;#
  2907  049F  1003               	bcf	3,0	;#
  2908  04A0  0C5C               	rrf	_mTouch_jitter,w	;#
  2909  04A1  1803               	btfsc	3,0	;#
  2910  04A2  3AB4               	xorlw	180	;#
  2911  04A3  00DC               	movwf	_mTouch_jitter	;#
  2912  04A4  393F               	andlw	63	;#
  2913  04A5  0020               	banksel	21	;#
  2914  04A6  0195               	clrf	21	;#
  2915  04A7  0795               	addwf	21,f	;#
  2916                           
  2917                           ;cas16f1933.h: 362: TMR0IF = 0;
  2918  04A8  110B               	bcf	11,2
  2919  04A9  0008               	return
  2920  04AA                     __end_of_mTouch_Scan:	
  2921  04AA                     __ptext615:	
  2922 ;; =============== function _mTouch_StoreScanA ends ============
  2923                           
  2924                           
  2925 ;; *************** function _mTouch_WaitForGoDone *****************
  2926 ;; Defined at:
  2927 ;;		line 434 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;		None
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;		None               void
  2934 ;; Registers used:
  2935 ;;		wreg
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 1E/0
  2939 ;;		Unchanged: FFFE0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2941 ;;      Params:         0       0       0       0
  2942 ;;      Locals:         0       0       0       0
  2943 ;;      Temps:          0       0       0       0
  2944 ;;      Totals:         0       0       0       0
  2945 ;;Total ram usage:        0 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_mTouch_Scan
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953  04AA                     _mTouch_WaitForGoDone:	
  2954                           
  2955                           ;cas16f1933.h: 435: mTouch_delayCount = 0xFF;
  2956                           
  2957                           ; Regs used in _mTouch_WaitForGoDone: [wreg]
  2958  04AA  30FF               	movlw	255
  2959  04AB  0020               	movlb	0	; select bank0
  2960  04AC  00C9               	movwf	_mTouch_delayCount
  2961  04AD                     i1l11107:	
  2962                           ;cas16f1933.h: 436: while (GO_nDONE && --mTouch_delayCount);
  2963                           
  2964  04AD  0021               	movlb	1	; select bank1
  2965  04AE  1C9D               	btfss	29,1
  2966  04AF  0008               	return
  2967  04B0  0020               	movlb	0	; select bank0
  2968  04B1  0BC9               	decfsz	_mTouch_delayCount,f
  2969  04B2  2CAD               	goto	i1l11107
  2970  04B3  0008               	return
  2971  04B4                     __end_of_mTouch_WaitForGoDone:	
  2972  04B4                     __ptext614:	
  2973 ;; =============== function _mTouch_StoreScanB ends ============
  2974                           
  2975                           
  2976 ;; *************** function _mTouch_StoreScanA *****************
  2977 ;; Defined at:
  2978 ;;		line 440 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;		None               void
  2985 ;; Registers used:
  2986 ;;		wreg
  2987 ;; Tracked objects:
  2988 ;;		On entry : 1E/0
  2989 ;;		On exit  : 1F/0
  2990 ;;		Unchanged: FFFE0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2992 ;;      Params:         0       0       0       0
  2993 ;;      Locals:         0       0       0       0
  2994 ;;      Temps:          0       0       0       0
  2995 ;;      Totals:         0       0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_mTouch_Scan
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004  04B4                     _mTouch_StoreScanA:	
  3005                           
  3006                           ;cas16f1933.h: 444: mTouch_lastResult = (uint16_t) (ADRESH << 8) + ADRESL;
  3007                           
  3008                           ; Regs used in _mTouch_StoreScanA: [wreg]
  3009  04B4  0021               	movlb	1	; select bank1
  3010  04B5  081C               	movf	28,w	;volatile
  3011  04B6  0020               	movlb	0	; select bank0
  3012  04B7  00BB               	movwf	_mTouch_lastResult+1
  3013  04B8  01BA               	clrf	_mTouch_lastResult
  3014  04B9  0021               	movlb	1	; select bank1
  3015  04BA  081B               	movf	27,w	;volatile
  3016  04BB  0020               	movlb	0	; select bank0
  3017  04BC  07BA               	addwf	_mTouch_lastResult,f
  3018  04BD  1803               	skipnc
  3019  04BE  0ABB               	incf	_mTouch_lastResult+1,f
  3020  04BF  0008               	return
  3021  04C0                     __end_of_mTouch_StoreScanA:	
  3022  04C0                     __ptext613:	
  3023 ;; =============== function _mTouch_DecimationFilter ends ============
  3024                           
  3025                           
  3026 ;; *************** function _mTouch_StoreScanB *****************
  3027 ;; Defined at:
  3028 ;;		line 453 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;		None               void
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0
  3037 ;; Tracked objects:
  3038 ;;		On entry : 1E/0
  3039 ;;		On exit  : 1F/0
  3040 ;;		Unchanged: FFFE0/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3042 ;;      Params:         0       0       0       0
  3043 ;;      Locals:         0       0       0       0
  3044 ;;      Temps:          1       0       0       0
  3045 ;;      Totals:         1       0       0       0
  3046 ;;Total ram usage:        1 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_mTouch_Scan
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054  04C0                     _mTouch_StoreScanB:	
  3055                           
  3056                           ;cas16f1933.h: 457: mTouch_lastResult = (uint16_t)((ADRESH | 0x04) << 8) + ADRESL - mTou
      +                          ch_lastResult;
  3057                           
  3058                           ; Regs used in _mTouch_StoreScanB: [wreg+status,2+status,0]
  3059  04C0  3004               	movlw	4
  3060  04C1  0021               	movlb	1	; select bank1
  3061  04C2  041C               	iorwf	28,w	;volatile
  3062  04C3  00F0               	movwf	??_mTouch_StoreScanB
  3063  04C4  0020               	movlb	0	; select bank0
  3064  04C5  083A               	movf	_mTouch_lastResult,w
  3065  04C6  0021               	movlb	1	; select bank1
  3066  04C7  021B               	subwf	27,w	;volatile
  3067  04C8  0020               	movlb	0	; select bank0
  3068  04C9  00BA               	movwf	_mTouch_lastResult
  3069  04CA  083B               	movf	_mTouch_lastResult+1,w
  3070  04CB  3B70               	subwfb	??_mTouch_StoreScanB,w
  3071  04CC  00BB               	movwf	_mTouch_lastResult+1
  3072  04CD  0008               	return
  3073  04CE                     __end_of_mTouch_StoreScanB:	
  3074  04CE                     __ptext612:	
  3075 ;; =============== function _mTouch_ScanA_4 ends ============
  3076                           
  3077                           
  3078 ;; *************** function _mTouch_DecimationFilter *****************
  3079 ;; Defined at:
  3080 ;;		line 373 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  result          2    5[COMMON] unsigned int 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;		None               void
  3087 ;; Registers used:
  3088 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 1F/0
  3091 ;;		On exit  : 1F/0
  3092 ;;		Unchanged: FFFE0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3094 ;;      Params:         0       0       0       0
  3095 ;;      Locals:         2       0       0       0
  3096 ;;      Temps:          5       0       0       0
  3097 ;;      Totals:         7       0       0       0
  3098 ;;Total ram usage:        7 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_mTouch_Scan
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106  04CE                     _mTouch_DecimationFilter:	
  3107                           
  3108                           ;cas16f1933.h: 376: uint16_t result = (uint16_t)((*mTouch_currentAcqData).result.v >> 4);
  3109                           
  3110                           ; Regs used in _mTouch_DecimationFilter: [wreg+fsr1l-status,0]
  3111  04CE  2552  3184         	fcall	PL14	;call to abstracted procedure
  3112  04D0  00F5               	movwf	mTouch_DecimationFilter@result
  3113  04D1  3F41               	moviw [1]fsr1
  3114  04D2  00F6               	movwf	mTouch_DecimationFilter@result+1
  3115  04D3  300F               	movlw	15
  3116  04D4  0EF5               	swapf	mTouch_DecimationFilter@result,f
  3117  04D5  0EF6               	swapf	mTouch_DecimationFilter@result+1,f
  3118  04D6  05F5               	andwf	mTouch_DecimationFilter@result,f
  3119  04D7  0876               	movf	mTouch_DecimationFilter@result+1,w
  3120  04D8  39F0               	andlw	240
  3121  04D9  04F5               	iorwf	mTouch_DecimationFilter@result,f
  3122  04DA  300F               	movlw	15
  3123  04DB  05F6               	andwf	mTouch_DecimationFilter@result+1,f
  3124                           
  3125                           ;cas16f1933.h: 394: if ((uint16_t)(mTouch_lastResult) > (uint16_t)(result + 5))
  3126  04DC  0875               	movf	mTouch_DecimationFilter@result,w
  3127  04DD  3E05               	addlw	5
  3128  04DE  00F0               	movwf	??_mTouch_DecimationFilter
  3129  04DF  3000               	movlw	0
  3130  04E0  3D76               	addwfc	mTouch_DecimationFilter@result+1,w
  3131  04E1  00F1               	movwf	??_mTouch_DecimationFilter+1
  3132  04E2  083B               	movf	_mTouch_lastResult+1,w
  3133  04E3  0271               	subwf	??_mTouch_DecimationFilter+1,w
  3134  04E4  1D03               	skipz
  3135  04E5  2CE8               	goto	u150_25
  3136  04E6  083A               	movf	_mTouch_lastResult,w
  3137  04E7  0270               	subwf	??_mTouch_DecimationFilter,w
  3138  04E8                     u150_25:	
  3139  04E8  1803               	skipnc
  3140  04E9  2CEF               	goto	i1l23396
  3141                           
  3142                           ;cas16f1933.h: 395: {
  3143                           ;cas16f1933.h: 396: result += 5;
  3144  04EA  3005               	movlw	5
  3145  04EB  07F5               	addwf	mTouch_DecimationFilter@result,f
  3146  04EC  1803               	skipnc
  3147  04ED  0AF6               	incf	mTouch_DecimationFilter@result+1,f
  3148                           
  3149                           ;cas16f1933.h: 397: }
  3150  04EE  2D0C               	goto	i1l23406
  3151  04EF                     i1l23396:	
  3152                           
  3153                           ;cas16f1933.h: 398: else if (result > 5)
  3154  04EF  3000               	movlw	0
  3155  04F0  0276               	subwf	mTouch_DecimationFilter@result+1,w
  3156  04F1  3006               	movlw	6
  3157  04F2  1903               	skipnz
  3158  04F3  0275               	subwf	mTouch_DecimationFilter@result,w
  3159  04F4  1C03               	skipc
  3160  04F5  2D08               	goto	i1l23402
  3161                           
  3162                           ;cas16f1933.h: 399: {
  3163                           ;cas16f1933.h: 400: if ((uint16_t)(mTouch_lastResult) < result - 5)
  3164  04F6  0875               	movf	mTouch_DecimationFilter@result,w
  3165  04F7  3EFB               	addlw	251
  3166  04F8  00F0               	movwf	??_mTouch_DecimationFilter
  3167  04F9  30FF               	movlw	255
  3168  04FA  3D76               	addwfc	mTouch_DecimationFilter@result+1,w
  3169  04FB  00F1               	movwf	??_mTouch_DecimationFilter+1
  3170  04FC  023B               	subwf	_mTouch_lastResult+1,w
  3171  04FD  1D03               	skipz
  3172  04FE  2D01               	goto	u152_25
  3173  04FF  0870               	movf	??_mTouch_DecimationFilter,w
  3174  0500  023A               	subwf	_mTouch_lastResult,w
  3175  0501                     u152_25:	
  3176  0501  1803               	skipnc
  3177  0502  2D08               	goto	i1l23402
  3178                           
  3179                           ;cas16f1933.h: 401: {
  3180                           ;cas16f1933.h: 402: result -= 5;
  3181  0503  3005               	movlw	5
  3182  0504  02F5               	subwf	mTouch_DecimationFilter@result,f
  3183  0505  3000               	movlw	0
  3184  0506  3BF6               	subwfb	mTouch_DecimationFilter@result+1,f
  3185                           
  3186                           ;cas16f1933.h: 403: } else {
  3187  0507  2D0C               	goto	i1l23406
  3188  0508                     i1l23402:	
  3189                           
  3190                           ;cas16f1933.h: 404: result = mTouch_lastResult;
  3191  0508  083B               	movf	_mTouch_lastResult+1,w
  3192  0509  00F6               	movwf	mTouch_DecimationFilter@result+1
  3193  050A  083A               	movf	_mTouch_lastResult,w
  3194  050B  00F5               	movwf	mTouch_DecimationFilter@result
  3195  050C                     i1l23406:	
  3196                           
  3197                           ;cas16f1933.h: 410: }
  3198                           ;cas16f1933.h: 419: (*mTouch_currentAcqData).result.v &= 0x000F;
  3199  050C  087D               	movf	_mTouch_currentAcqData,w
  3200  050D  3E02               	addlw	2
  3201  050E  0086               	movwf	6
  3202  050F  300F               	movlw	15
  3203  0510  0187               	clrf	7
  3204  0511  0581               	andwf	1,f
  3205  0512  3141               	addfsr 1,1
  3206  0513  0181               	clrf	1
  3207                           
  3208                           ;cas16f1933.h: 420: (*mTouch_currentAcqData).result.v |= (uint16_t)(result << 4);
  3209  0514  0876               	movf	mTouch_DecimationFilter@result+1,w
  3210  0515  00F1               	movwf	??_mTouch_DecimationFilter+1
  3211  0516  0875               	movf	mTouch_DecimationFilter@result,w
  3212  0517  00F0               	movwf	??_mTouch_DecimationFilter
  3213  0518  30F0               	movlw	240
  3214  0519  0EF0               	swapf	??_mTouch_DecimationFilter,f
  3215  051A  0EF1               	swapf	??_mTouch_DecimationFilter+1,f
  3216  051B  05F1               	andwf	??_mTouch_DecimationFilter+1,f
  3217  051C  0870               	movf	??_mTouch_DecimationFilter,w
  3218  051D  390F               	andlw	15
  3219  051E  04F1               	iorwf	??_mTouch_DecimationFilter+1,f
  3220  051F  30F0               	movlw	240
  3221  0520  05F0               	andwf	??_mTouch_DecimationFilter,f
  3222  0521  087D               	movf	_mTouch_currentAcqData,w
  3223  0522  3E02               	addlw	2
  3224  0523  0086               	movwf	6
  3225  0524  0187               	clrf	7
  3226  0525  0870               	movf	??_mTouch_DecimationFilter,w
  3227  0526  0481               	iorwf	1,f
  3228  0527  3141               	addfsr 1,1
  3229  0528  0871               	movf	??_mTouch_DecimationFilter+1,w
  3230  0529  0481               	iorwf	1,f
  3231                           
  3232                           ;cas16f1933.h: 427: (*mTouch_currentAcqData).accumulator.v += (uint16_t)((*mTouch_curren
      +                          tAcqData).result.v >> 4);
  3233  052A  2552  3184         	fcall	PL14	;call to abstracted procedure
  3234  052C  00F0               	movwf	??_mTouch_DecimationFilter
  3235  052D  3F41               	moviw [1]fsr1
  3236  052E  00F1               	movwf	??_mTouch_DecimationFilter+1
  3237  052F  3004               	movlw	4
  3238  0530                     u153_25:	
  3239  0530  36F1               	lsrf	??_mTouch_DecimationFilter+1,f
  3240  0531  0CF0               	rrf	??_mTouch_DecimationFilter,f
  3241  0532  0B89               	decfsz	9,f
  3242  0533  2D30               	goto	u153_25
  3243  0534  0870               	movf	??_mTouch_DecimationFilter,w
  3244  0535  00F2               	movwf	??_mTouch_DecimationFilter+2
  3245  0536  0871               	movf	??_mTouch_DecimationFilter+1,w
  3246  0537  00F3               	movwf	??_mTouch_DecimationFilter+3
  3247  0538  01F4               	clrf	??_mTouch_DecimationFilter+4
  3248  0539  087D               	movf	_mTouch_currentAcqData,w
  3249  053A  0086               	movwf	6
  3250  053B  0187               	clrf	7
  3251  053C  0872               	movf	??_mTouch_DecimationFilter+2,w
  3252  053D  0781               	addwf	1,f
  3253  053E  3141               	addfsr 1,1
  3254  053F  0873               	movf	??_mTouch_DecimationFilter+3,w
  3255  0540  3D81               	addwfc	1,f
  3256  0541  3141               	addfsr 1,1
  3257  0542  0874               	movf	??_mTouch_DecimationFilter+4,w
  3258  0543  3D81               	addwfc	1,f
  3259  0544  0008               	return
  3260  0545                     __end_of_mTouch_DecimationFilter:	
  3261  0545                     __ptext601:	
  3262 ;; =============== function _mTouch_Scan ends ============
  3263                           
  3264                           
  3265 ;; *************** function i1_mTouch_ChangeMode *****************
  3266 ;; Defined at:
  3267 ;;		line 470 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;		None               void
  3274 ;; Registers used:
  3275 ;;		wreg, status,2
  3276 ;; Tracked objects:
  3277 ;;		On entry : 1F/0
  3278 ;;		On exit  : 1F/1
  3279 ;;		Unchanged: FFFE0/0
  3280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3281 ;;      Params:         0       0       0       0
  3282 ;;      Locals:         0       0       0       0
  3283 ;;      Temps:          0       0       0       0
  3284 ;;      Totals:         0       0       0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; This function calls:
  3288 ;;		Nothing
  3289 ;; This function is called by:
  3290 ;;		_mTouch_Scan
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293  0545                     i1_mTouch_ChangeMode:	
  3294  0545  301E               	movlw	30
  3295                           
  3296                           ;cas16f1933.h: 472: mTouch_currentAcqData = 0;
  3297                           
  3298                           ; Regs used in i1_mTouch_ChangeMode: [wreg+status,2]
  3299  0546  01FD               	clrf	_mTouch_currentAcqData
  3300                           
  3301                           ;cas16f1933.h: 491: mTouch_currentScan = 0;
  3302  0547  01C8               	clrf	_mTouch_currentScan
  3303                           
  3304                           ;cas16f1933.h: 509: mTouch_stateVars.sampleCounter = 30;
  3305  0548  0021               	movlb	1	; select bank1
  3306  0549  00A0               	movwf	_mTouch_stateVars^(0+128)
  3307  054A  0008               	return
  3308  054B                     __end_ofi1_mTouch_ChangeMode:	
  3309  054B                     PL7:	
  3310  054B  0020               	movlb	0	; select bank0
  3311  054C  0848               	movf	_mTouch_currentScan,w
  3312  054D  0709               	addwf	9,w
  3313  054E  0709               	addwf	9,w
  3314  054F  3EBA               	addlw	_mTouch_acqData& (0+255)
  3315  0550  00FD               	movwf	_mTouch_currentAcqData
  3316  0551  0008               	return
  3317  0552                     PL14:	
  3318  0552  087D               	movf	_mTouch_currentAcqData,w
  3319  0553  3E02               	addlw	2
  3320  0554  0086               	movwf	6
  3321  0555  0187               	clrf	7
  3322  0556  3F40               	moviw [0]fsr1
  3323  0557  0008               	return
  3324                           
  3325                           	psect	text602
  3326  05F5                     __ptext602:	
  3327 ;; =============== function i1_mTouch_ChangeMode ends ============
  3328                           
  3329                           
  3330 ;; *************** function _mTouch_ScanB_3 *****************
  3331 ;; Defined at:
  3332 ;;		line 523 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;		None
  3337 ;; Return value:  Size  Location     Type
  3338 ;;		None               void
  3339 ;; Registers used:
  3340 ;;		None
  3341 ;; Tracked objects:
  3342 ;;		On entry : 1F/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: FFE00/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3346 ;;      Params:         0       0       0       0
  3347 ;;      Locals:         0       0       0       0
  3348 ;;      Temps:          0       0       0       0
  3349 ;;      Totals:         0       0       0       0
  3350 ;;Total ram usage:        0 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_mTouch_Scan
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358  05F5                     _mTouch_ScanB_3:	
  3359                           
  3360                           ; Regs used in _mTouch_ScanB_3: []
  3361  05F5  0022               	banksel	269	;#
  3362  05F6  100D               	bcf	13,0	;#
  3363  05F7  0021               	banksel	157	;#
  3364  05F8  3031               	movlw	49	;#
  3365  05F9  009D               	movwf	29	;#
  3366  05FA  300D               	movlw	13	;#
  3367  05FB  0086               	movwf	6	;#
  3368  05FC  3001               	movlw	1	;#
  3369  05FD  0087               	movwf	7	;#
  3370  05FE  308D               	movlw	141	;#
  3371  05FF  0084               	movwf	4	;#
  3372  0600  3000               	movlw	0	;#
  3373  0601  0085               	movwf	5	;#
  3374  0602  0020               	banksel	_mTouch_delayCount	;#
  3375  0603  3005               	movlw	5	;#
  3376  0604  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3377  0605  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3378  0606  2DF4               	goto	($+-1)	;#
  3379  0607  0021               	banksel	157	;#
  3380  0608  3029               	movlw	41	;#
  3381  0609  1480               	bsf	0,1	;#
  3382  060A  009D               	movwf	29	;#
  3383  060B  0020               	banksel	_mTouch_delayCount	;#
  3384  060C  3005               	movlw	5	;#
  3385  060D  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3386  060E  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3387  060F  2DF4               	goto	($+-1)	;#
  3388  0610  0021               	banksel	157	;#
  3389  0611  149D               	bsf	29,1	;#
  3390  0612  0000               	nop	;#
  3391  0613  1081               	bcf	1,1	;#
  3392  0614  1080               	bcf	0,1	;#
  3393  0615  0008               	return
  3394  0616                     __end_of_mTouch_ScanB_3:	
  3395                           
  3396                           	psect	text603
  3397  0616                     __ptext603:	
  3398 ;; =============== function _mTouch_ScanB_3 ends ============
  3399                           
  3400                           
  3401 ;; *************** function _mTouch_ScanB_2 *****************
  3402 ;; Defined at:
  3403 ;;		line 520 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;		None               void
  3410 ;; Registers used:
  3411 ;;		None
  3412 ;; Tracked objects:
  3413 ;;		On entry : 1F/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: FFE00/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3417 ;;      Params:         0       0       0       0
  3418 ;;      Locals:         0       0       0       0
  3419 ;;      Temps:          0       0       0       0
  3420 ;;      Totals:         0       0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_mTouch_Scan
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429  0616                     _mTouch_ScanB_2:	
  3430                           
  3431                           ; Regs used in _mTouch_ScanB_2: []
  3432  0616  0022               	banksel	269	;#
  3433  0617  118D               	bcf	13,3	;#
  3434  0618  0021               	banksel	157	;#
  3435  0619  3025               	movlw	37	;#
  3436  061A  009D               	movwf	29	;#
  3437  061B  300D               	movlw	13	;#
  3438  061C  0086               	movwf	6	;#
  3439  061D  3001               	movlw	1	;#
  3440  061E  0087               	movwf	7	;#
  3441  061F  308D               	movlw	141	;#
  3442  0620  0084               	movwf	4	;#
  3443  0621  3000               	movlw	0	;#
  3444  0622  0085               	movwf	5	;#
  3445  0623  0020               	banksel	_mTouch_delayCount	;#
  3446  0624  3005               	movlw	5	;#
  3447  0625  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3448  0626  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3449  0627  2E15               	goto	($+-1)	;#
  3450  0628  0021               	banksel	157	;#
  3451  0629  3031               	movlw	49	;#
  3452  062A  1400               	bsf	0,0	;#
  3453  062B  009D               	movwf	29	;#
  3454  062C  0020               	banksel	_mTouch_delayCount	;#
  3455  062D  3005               	movlw	5	;#
  3456  062E  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3457  062F  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3458  0630  2E15               	goto	($+-1)	;#
  3459  0631  0021               	banksel	157	;#
  3460  0632  149D               	bsf	29,1	;#
  3461  0633  0000               	nop	;#
  3462  0634  1001               	bcf	1,0	;#
  3463  0635  1000               	bcf	0,0	;#
  3464  0636  0008               	return
  3465  0637                     __end_of_mTouch_ScanB_2:	
  3466                           
  3467                           	psect	text604
  3468  0637                     __ptext604:	
  3469 ;; =============== function _mTouch_ScanB_2 ends ============
  3470                           
  3471                           
  3472 ;; *************** function _mTouch_ScanB_1 *****************
  3473 ;; Defined at:
  3474 ;;		line 517 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;		None               void
  3481 ;; Registers used:
  3482 ;;		None
  3483 ;; Tracked objects:
  3484 ;;		On entry : 1F/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: FFE00/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3488 ;;      Params:         0       0       0       0
  3489 ;;      Locals:         0       0       0       0
  3490 ;;      Temps:          0       0       0       0
  3491 ;;      Totals:         0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_mTouch_Scan
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500  0637                     _mTouch_ScanB_1:	
  3501                           
  3502                           ; Regs used in _mTouch_ScanB_1: []
  3503  0637  0022               	banksel	269	;#
  3504  0638  120D               	bcf	13,4	;#
  3505  0639  0021               	banksel	157	;#
  3506  063A  302D               	movlw	45	;#
  3507  063B  009D               	movwf	29	;#
  3508  063C  300D               	movlw	13	;#
  3509  063D  0086               	movwf	6	;#
  3510  063E  3001               	movlw	1	;#
  3511  063F  0087               	movwf	7	;#
  3512  0640  308D               	movlw	141	;#
  3513  0641  0084               	movwf	4	;#
  3514  0642  3000               	movlw	0	;#
  3515  0643  0085               	movwf	5	;#
  3516  0644  0020               	banksel	_mTouch_delayCount	;#
  3517  0645  3005               	movlw	5	;#
  3518  0646  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3519  0647  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3520  0648  2E36               	goto	($+-1)	;#
  3521  0649  0021               	banksel	157	;#
  3522  064A  3025               	movlw	37	;#
  3523  064B  1580               	bsf	0,3	;#
  3524  064C  009D               	movwf	29	;#
  3525  064D  0020               	banksel	_mTouch_delayCount	;#
  3526  064E  3005               	movlw	5	;#
  3527  064F  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3528  0650  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3529  0651  2E36               	goto	($+-1)	;#
  3530  0652  0021               	banksel	157	;#
  3531  0653  149D               	bsf	29,1	;#
  3532  0654  0000               	nop	;#
  3533  0655  1181               	bcf	1,3	;#
  3534  0656  1180               	bcf	0,3	;#
  3535  0657  0008               	return
  3536  0658                     __end_of_mTouch_ScanB_1:	
  3537                           
  3538                           	psect	text605
  3539  0658                     __ptext605:	
  3540 ;; =============== function _mTouch_ScanB_1 ends ============
  3541                           
  3542                           
  3543 ;; *************** function _mTouch_ScanB_0 *****************
  3544 ;; Defined at:
  3545 ;;		line 514 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;		None               void
  3552 ;; Registers used:
  3553 ;;		None
  3554 ;; Tracked objects:
  3555 ;;		On entry : 1F/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: FFE00/0
  3558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3559 ;;      Params:         0       0       0       0
  3560 ;;      Locals:         0       0       0       0
  3561 ;;      Temps:          0       0       0       0
  3562 ;;      Totals:         0       0       0       0
  3563 ;;Total ram usage:        0 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; This function calls:
  3566 ;;		Nothing
  3567 ;; This function is called by:
  3568 ;;		_mTouch_Scan
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571  0658                     _mTouch_ScanB_0:	
  3572                           
  3573                           ; Regs used in _mTouch_ScanB_0: []
  3574  0658  0022               	banksel	269	;#
  3575  0659  110D               	bcf	13,2	;#
  3576  065A  0021               	banksel	157	;#
  3577  065B  3021               	movlw	33	;#
  3578  065C  009D               	movwf	29	;#
  3579  065D  300D               	movlw	13	;#
  3580  065E  0086               	movwf	6	;#
  3581  065F  3001               	movlw	1	;#
  3582  0660  0087               	movwf	7	;#
  3583  0661  308D               	movlw	141	;#
  3584  0662  0084               	movwf	4	;#
  3585  0663  3000               	movlw	0	;#
  3586  0664  0085               	movwf	5	;#
  3587  0665  0020               	banksel	_mTouch_delayCount	;#
  3588  0666  3005               	movlw	5	;#
  3589  0667  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3590  0668  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3591  0669  2E57               	goto	($+-1)	;#
  3592  066A  0021               	banksel	157	;#
  3593  066B  302D               	movlw	45	;#
  3594  066C  1600               	bsf	0,4	;#
  3595  066D  009D               	movwf	29	;#
  3596  066E  0020               	banksel	_mTouch_delayCount	;#
  3597  066F  3005               	movlw	5	;#
  3598  0670  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3599  0671  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3600  0672  2E57               	goto	($+-1)	;#
  3601  0673  0021               	banksel	157	;#
  3602  0674  149D               	bsf	29,1	;#
  3603  0675  0000               	nop	;#
  3604  0676  1201               	bcf	1,4	;#
  3605  0677  1200               	bcf	0,4	;#
  3606  0678  0008               	return
  3607  0679                     __end_of_mTouch_ScanB_0:	
  3608                           
  3609                           	psect	text606
  3610  0679                     __ptext606:	
  3611 ;; =============== function _mTouch_ScanB_0 ends ============
  3612                           
  3613                           
  3614 ;; *************** function _mTouch_ScanB_4 *****************
  3615 ;; Defined at:
  3616 ;;		line 526 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;		None               void
  3623 ;; Registers used:
  3624 ;;		None
  3625 ;; Tracked objects:
  3626 ;;		On entry : 1F/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: FFE00/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       0       0       0
  3631 ;;      Locals:         0       0       0       0
  3632 ;;      Temps:          0       0       0       0
  3633 ;;      Totals:         0       0       0       0
  3634 ;;Total ram usage:        0 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_mTouch_Scan
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642  0679                     _mTouch_ScanB_4:	
  3643                           
  3644                           ; Regs used in _mTouch_ScanB_4: []
  3645  0679  0022               	banksel	269	;#
  3646  067A  108D               	bcf	13,1	;#
  3647  067B  0021               	banksel	157	;#
  3648  067C  3029               	movlw	41	;#
  3649  067D  009D               	movwf	29	;#
  3650  067E  300D               	movlw	13	;#
  3651  067F  0086               	movwf	6	;#
  3652  0680  3001               	movlw	1	;#
  3653  0681  0087               	movwf	7	;#
  3654  0682  308D               	movlw	141	;#
  3655  0683  0084               	movwf	4	;#
  3656  0684  3000               	movlw	0	;#
  3657  0685  0085               	movwf	5	;#
  3658  0686  0020               	banksel	_mTouch_delayCount	;#
  3659  0687  3005               	movlw	5	;#
  3660  0688  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3661  0689  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3662  068A  2E78               	goto	($+-1)	;#
  3663  068B  0021               	banksel	157	;#
  3664  068C  3021               	movlw	33	;#
  3665  068D  1500               	bsf	0,2	;#
  3666  068E  009D               	movwf	29	;#
  3667  068F  0020               	banksel	_mTouch_delayCount	;#
  3668  0690  3005               	movlw	5	;#
  3669  0691  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3670  0692  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3671  0693  2E78               	goto	($+-1)	;#
  3672  0694  0021               	banksel	157	;#
  3673  0695  149D               	bsf	29,1	;#
  3674  0696  0000               	nop	;#
  3675  0697  1101               	bcf	1,2	;#
  3676  0698  1100               	bcf	0,2	;#
  3677  0699  0008               	return
  3678  069A                     __end_of_mTouch_ScanB_4:	
  3679                           
  3680                           	psect	text607
  3681  069A                     __ptext607:	
  3682 ;; =============== function _mTouch_ScanB_4 ends ============
  3683                           
  3684                           
  3685 ;; *************** function _mTouch_ScanA_3 *****************
  3686 ;; Defined at:
  3687 ;;		line 523 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;		None               void
  3694 ;; Registers used:
  3695 ;;		None
  3696 ;; Tracked objects:
  3697 ;;		On entry : 1F/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: FFE00/0
  3700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3701 ;;      Params:         0       0       0       0
  3702 ;;      Locals:         0       0       0       0
  3703 ;;      Temps:          0       0       0       0
  3704 ;;      Totals:         0       0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_mTouch_Scan
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713  069A                     _mTouch_ScanA_3:	
  3714                           
  3715                           ; Regs used in _mTouch_ScanA_3: []
  3716  069A  0022               	banksel	269	;#
  3717  069B  140D               	bsf	13,0	;#
  3718  069C  0021               	banksel	157	;#
  3719  069D  3031               	movlw	49	;#
  3720  069E  009D               	movwf	29	;#
  3721  069F  300D               	movlw	13	;#
  3722  06A0  0086               	movwf	6	;#
  3723  06A1  3001               	movlw	1	;#
  3724  06A2  0087               	movwf	7	;#
  3725  06A3  308D               	movlw	141	;#
  3726  06A4  0084               	movwf	4	;#
  3727  06A5  3000               	movlw	0	;#
  3728  06A6  0085               	movwf	5	;#
  3729  06A7  0020               	banksel	_mTouch_delayCount	;#
  3730  06A8  3005               	movlw	5	;#
  3731  06A9  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3732  06AA  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3733  06AB  2E99               	goto	($+-1)	;#
  3734  06AC  0021               	banksel	157	;#
  3735  06AD  3029               	movlw	41	;#
  3736  06AE  1480               	bsf	0,1	;#
  3737  06AF  009D               	movwf	29	;#
  3738  06B0  0020               	banksel	_mTouch_delayCount	;#
  3739  06B1  3005               	movlw	5	;#
  3740  06B2  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3741  06B3  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3742  06B4  2E99               	goto	($+-1)	;#
  3743  06B5  0021               	banksel	157	;#
  3744  06B6  149D               	bsf	29,1	;#
  3745  06B7  0000               	nop	;#
  3746  06B8  1481               	bsf	1,1	;#
  3747  06B9  1080               	bcf	0,1	;#
  3748  06BA  0008               	return
  3749  06BB                     __end_of_mTouch_ScanA_3:	
  3750                           
  3751                           	psect	text608
  3752  06BB                     __ptext608:	
  3753 ;; =============== function _mTouch_ScanA_3 ends ============
  3754                           
  3755                           
  3756 ;; *************** function _mTouch_ScanA_2 *****************
  3757 ;; Defined at:
  3758 ;;		line 520 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;		None               void
  3765 ;; Registers used:
  3766 ;;		None
  3767 ;; Tracked objects:
  3768 ;;		On entry : 1F/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: FFE00/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3772 ;;      Params:         0       0       0       0
  3773 ;;      Locals:         0       0       0       0
  3774 ;;      Temps:          0       0       0       0
  3775 ;;      Totals:         0       0       0       0
  3776 ;;Total ram usage:        0 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; This function calls:
  3779 ;;		Nothing
  3780 ;; This function is called by:
  3781 ;;		_mTouch_Scan
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784  06BB                     _mTouch_ScanA_2:	
  3785                           
  3786                           ; Regs used in _mTouch_ScanA_2: []
  3787  06BB  0022               	banksel	269	;#
  3788  06BC  158D               	bsf	13,3	;#
  3789  06BD  0021               	banksel	157	;#
  3790  06BE  3025               	movlw	37	;#
  3791  06BF  009D               	movwf	29	;#
  3792  06C0  300D               	movlw	13	;#
  3793  06C1  0086               	movwf	6	;#
  3794  06C2  3001               	movlw	1	;#
  3795  06C3  0087               	movwf	7	;#
  3796  06C4  308D               	movlw	141	;#
  3797  06C5  0084               	movwf	4	;#
  3798  06C6  3000               	movlw	0	;#
  3799  06C7  0085               	movwf	5	;#
  3800  06C8  0020               	banksel	_mTouch_delayCount	;#
  3801  06C9  3005               	movlw	5	;#
  3802  06CA  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3803  06CB  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3804  06CC  2EBA               	goto	($+-1)	;#
  3805  06CD  0021               	banksel	157	;#
  3806  06CE  3031               	movlw	49	;#
  3807  06CF  1400               	bsf	0,0	;#
  3808  06D0  009D               	movwf	29	;#
  3809  06D1  0020               	banksel	_mTouch_delayCount	;#
  3810  06D2  3005               	movlw	5	;#
  3811  06D3  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3812  06D4  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3813  06D5  2EBA               	goto	($+-1)	;#
  3814  06D6  0021               	banksel	157	;#
  3815  06D7  149D               	bsf	29,1	;#
  3816  06D8  0000               	nop	;#
  3817  06D9  1401               	bsf	1,0	;#
  3818  06DA  1000               	bcf	0,0	;#
  3819  06DB  0008               	return
  3820  06DC                     __end_of_mTouch_ScanA_2:	
  3821                           
  3822                           	psect	text609
  3823  06DC                     __ptext609:	
  3824 ;; =============== function _mTouch_ScanA_2 ends ============
  3825                           
  3826                           
  3827 ;; *************** function _mTouch_ScanA_1 *****************
  3828 ;; Defined at:
  3829 ;;		line 517 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;		None
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;		None
  3834 ;; Return value:  Size  Location     Type
  3835 ;;		None               void
  3836 ;; Registers used:
  3837 ;;		None
  3838 ;; Tracked objects:
  3839 ;;		On entry : 1F/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: FFE00/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3843 ;;      Params:         0       0       0       0
  3844 ;;      Locals:         0       0       0       0
  3845 ;;      Temps:          0       0       0       0
  3846 ;;      Totals:         0       0       0       0
  3847 ;;Total ram usage:        0 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_mTouch_Scan
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855  06DC                     _mTouch_ScanA_1:	
  3856                           
  3857                           ; Regs used in _mTouch_ScanA_1: []
  3858  06DC  0022               	banksel	269	;#
  3859  06DD  160D               	bsf	13,4	;#
  3860  06DE  0021               	banksel	157	;#
  3861  06DF  302D               	movlw	45	;#
  3862  06E0  009D               	movwf	29	;#
  3863  06E1  300D               	movlw	13	;#
  3864  06E2  0086               	movwf	6	;#
  3865  06E3  3001               	movlw	1	;#
  3866  06E4  0087               	movwf	7	;#
  3867  06E5  308D               	movlw	141	;#
  3868  06E6  0084               	movwf	4	;#
  3869  06E7  3000               	movlw	0	;#
  3870  06E8  0085               	movwf	5	;#
  3871  06E9  0020               	banksel	_mTouch_delayCount	;#
  3872  06EA  3005               	movlw	5	;#
  3873  06EB  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3874  06EC  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3875  06ED  2EDB               	goto	($+-1)	;#
  3876  06EE  0021               	banksel	157	;#
  3877  06EF  3025               	movlw	37	;#
  3878  06F0  1580               	bsf	0,3	;#
  3879  06F1  009D               	movwf	29	;#
  3880  06F2  0020               	banksel	_mTouch_delayCount	;#
  3881  06F3  3005               	movlw	5	;#
  3882  06F4  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3883  06F5  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3884  06F6  2EDB               	goto	($+-1)	;#
  3885  06F7  0021               	banksel	157	;#
  3886  06F8  149D               	bsf	29,1	;#
  3887  06F9  0000               	nop	;#
  3888  06FA  1581               	bsf	1,3	;#
  3889  06FB  1180               	bcf	0,3	;#
  3890  06FC  0008               	return
  3891  06FD                     __end_of_mTouch_ScanA_1:	
  3892                           
  3893                           	psect	text610
  3894  06FD                     __ptext610:	
  3895 ;; =============== function _mTouch_ScanA_1 ends ============
  3896                           
  3897                           
  3898 ;; *************** function _mTouch_ScanA_0 *****************
  3899 ;; Defined at:
  3900 ;;		line 514 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;		None               void
  3907 ;; Registers used:
  3908 ;;		None
  3909 ;; Tracked objects:
  3910 ;;		On entry : 1F/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: FFE00/0
  3913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3914 ;;      Params:         0       0       0       0
  3915 ;;      Locals:         0       0       0       0
  3916 ;;      Temps:          0       0       0       0
  3917 ;;      Totals:         0       0       0       0
  3918 ;;Total ram usage:        0 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_mTouch_Scan
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926  06FD                     _mTouch_ScanA_0:	
  3927                           
  3928                           ; Regs used in _mTouch_ScanA_0: []
  3929  06FD  0022               	banksel	269	;#
  3930  06FE  150D               	bsf	13,2	;#
  3931  06FF  0021               	banksel	157	;#
  3932  0700  3021               	movlw	33	;#
  3933  0701  009D               	movwf	29	;#
  3934  0702  300D               	movlw	13	;#
  3935  0703  0086               	movwf	6	;#
  3936  0704  3001               	movlw	1	;#
  3937  0705  0087               	movwf	7	;#
  3938  0706  308D               	movlw	141	;#
  3939  0707  0084               	movwf	4	;#
  3940  0708  3000               	movlw	0	;#
  3941  0709  0085               	movwf	5	;#
  3942  070A  0020               	banksel	_mTouch_delayCount	;#
  3943  070B  3005               	movlw	5	;#
  3944  070C  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3945  070D  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3946  070E  2EFC               	goto	($+-1)	;#
  3947  070F  0021               	banksel	157	;#
  3948  0710  302D               	movlw	45	;#
  3949  0711  1600               	bsf	0,4	;#
  3950  0712  009D               	movwf	29	;#
  3951  0713  0020               	banksel	_mTouch_delayCount	;#
  3952  0714  3005               	movlw	5	;#
  3953  0715  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  3954  0716  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  3955  0717  2EFC               	goto	($+-1)	;#
  3956  0718  0021               	banksel	157	;#
  3957  0719  149D               	bsf	29,1	;#
  3958  071A  0000               	nop	;#
  3959  071B  1601               	bsf	1,4	;#
  3960  071C  1200               	bcf	0,4	;#
  3961  071D  0008               	return
  3962  071E                     __end_of_mTouch_ScanA_0:	
  3963                           
  3964                           	psect	text611
  3965  071E                     __ptext611:	
  3966 ;; =============== function _mTouch_ScanA_0 ends ============
  3967                           
  3968                           
  3969 ;; *************** function _mTouch_ScanA_4 *****************
  3970 ;; Defined at:
  3971 ;;		line 526 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\cas16f1933.h"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;		None               void
  3978 ;; Registers used:
  3979 ;;		None
  3980 ;; Tracked objects:
  3981 ;;		On entry : 1F/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: FFE00/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3985 ;;      Params:         0       0       0       0
  3986 ;;      Locals:         0       0       0       0
  3987 ;;      Temps:          0       0       0       0
  3988 ;;      Totals:         0       0       0       0
  3989 ;;Total ram usage:        0 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_mTouch_Scan
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997  071E                     _mTouch_ScanA_4:	
  3998                           
  3999                           ; Regs used in _mTouch_ScanA_4: []
  4000  071E  0022               	banksel	269	;#
  4001  071F  148D               	bsf	13,1	;#
  4002  0720  0021               	banksel	157	;#
  4003  0721  3029               	movlw	41	;#
  4004  0722  009D               	movwf	29	;#
  4005  0723  300D               	movlw	13	;#
  4006  0724  0086               	movwf	6	;#
  4007  0725  3001               	movlw	1	;#
  4008  0726  0087               	movwf	7	;#
  4009  0727  308D               	movlw	141	;#
  4010  0728  0084               	movwf	4	;#
  4011  0729  3000               	movlw	0	;#
  4012  072A  0085               	movwf	5	;#
  4013  072B  0020               	banksel	_mTouch_delayCount	;#
  4014  072C  3005               	movlw	5	;#
  4015  072D  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  4016  072E  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  4017  072F  2F1D               	goto	($+-1)	;#
  4018  0730  0021               	banksel	157	;#
  4019  0731  3021               	movlw	33	;#
  4020  0732  1500               	bsf	0,2	;#
  4021  0733  009D               	movwf	29	;#
  4022  0734  0020               	banksel	_mTouch_delayCount	;#
  4023  0735  3005               	movlw	5	;#
  4024  0736  00C9               	movwf	_mTouch_delayCount& (0+127)	;#
  4025  0737  0BC9               	decfsz	_mTouch_delayCount& (0+127),f	;#
  4026  0738  2F1D               	goto	($+-1)	;#
  4027  0739  0021               	banksel	157	;#
  4028  073A  149D               	bsf	29,1	;#
  4029  073B  0000               	nop	;#
  4030  073C  1501               	bsf	1,2	;#
  4031  073D  1100               	bcf	0,2	;#
  4032  073E  0008               	return
  4033  073F                     __end_of_mTouch_ScanA_4:	
  4034                           
  4035                           	psect	text616
  4036  0558                     __ptext616:	
  4037 ;; =============== function _mTouch_WaitForGoDone ends ============
  4038                           
  4039                           
  4040 ;; *************** function _IchLeds *****************
  4041 ;; Defined at:
  4042 ;;		line 194 in file "ICH-LR-HR.C"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0
  4051 ;; Tracked objects:
  4052 ;;		On entry : 1F/0
  4053 ;;		On exit  : 1D/0
  4054 ;;		Unchanged: FFE00/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4056 ;;      Params:         0       0       0       0
  4057 ;;      Locals:         0       0       0       0
  4058 ;;      Temps:          0       0       0       0
  4059 ;;      Totals:         0       0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_ISR
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068  0558                     _IchLeds:	
  4069  0558  3014               	movlw	20
  4070                           
  4071                           ;ICH-LR-HR.C: 195: LedPwmCount++;
  4072                           
  4073                           ; Regs used in _IchLeds: [wreg+status,2+status,0]
  4074  0559  0AFC               	incf	_LedPwmCount,f
  4075                           
  4076                           ;ICH-LR-HR.C: 196: if(LedPwmCount>=20){
  4077  055A  027C               	subwf	_LedPwmCount,w
  4078  055B  1803               	btfsc	3,0
  4079                           
  4080                           ;ICH-LR-HR.C: 197: LedPwmCount=0;
  4081  055C  01FC               	clrf	_LedPwmCount
  4082                           
  4083                           ;ICH-LR-HR.C: 198: }
  4084                           ;ICH-LR-HR.C: 200: if ((LedPwmCount <= 1) && led_enable){
  4085  055D  3002               	movlw	2
  4086  055E  027C               	subwf	_LedPwmCount,w
  4087  055F  1C03               	btfss	3,0
  4088  0560  1F7A               	btfss	_led_enable/(0+8),_led_enable& (0+7)
  4089  0561  2D81               	goto	i1l1915
  4090                           
  4091                           ;ICH-LR-HR.C: 201: LATB7 = LATC4 = LATC6 = LATC5 = LATC3 = 1;
  4092  0562  0022               	movlb	2	; select bank2
  4093  0563  158E               	bsf	14,3
  4094  0564  1D8E               	btfss	14,3
  4095  0565  2D69               	goto	u128_20
  4096  0566  0022               	movlb	2	; select bank2
  4097  0567  168E               	bsf	14,5
  4098  0568  2D6B               	goto	u129_24
  4099  0569                     u128_20:	
  4100  0569  0022               	movlb	2	; select bank2
  4101  056A  128E               	bcf	14,5
  4102  056B                     u129_24:	
  4103  056B  1E8E               	btfss	14,5
  4104  056C  2D70               	goto	u129_20
  4105  056D  0022               	movlb	2	; select bank2
  4106  056E  170E               	bsf	14,6
  4107  056F  2D72               	goto	u130_24
  4108  0570                     u129_20:	
  4109  0570  0022               	movlb	2	; select bank2
  4110  0571  130E               	bcf	14,6
  4111  0572                     u130_24:	
  4112  0572  1F0E               	btfss	14,6
  4113  0573  2D77               	goto	u130_20
  4114  0574  0022               	movlb	2	; select bank2
  4115  0575  160E               	bsf	14,4
  4116  0576  2D79               	goto	u131_24
  4117  0577                     u130_20:	
  4118  0577  0022               	movlb	2	; select bank2
  4119  0578  120E               	bcf	14,4
  4120  0579                     u131_24:	
  4121  0579  1E0E               	btfss	14,4
  4122  057A  2D7E               	goto	u131_20
  4123  057B  0022               	movlb	2	; select bank2
  4124  057C  178D               	bsf	13,7
  4125  057D  0008               	return
  4126  057E                     u131_20:	
  4127  057E  0022               	movlb	2	; select bank2
  4128  057F  138D               	bcf	13,7
  4129                           
  4130                           ;ICH-LR-HR.C: 202: }
  4131  0580  0008               	return
  4132  0581                     i1l1915:	
  4133                           
  4134                           ;ICH-LR-HR.C: 203: else{
  4135                           ;ICH-LR-HR.C: 204: if (!Key_LED.oneBit.PROpen || !led_enable){
  4136  0581  1C7B               	btfss	_Key_LED,0
  4137  0582  2D85               	goto	i1l1919
  4138  0583  1B7A               	btfsc	_led_enable/(0+8),_led_enable& (0+7)
  4139  0584  2D87               	goto	i1l1917
  4140  0585                     i1l1919:	
  4141                           
  4142                           ;ICH-LR-HR.C: 205: LATB7 = 0;
  4143  0585  0022               	movlb	2	; select bank2
  4144  0586  138D               	bcf	13,7
  4145  0587                     i1l1917:	
  4146                           
  4147                           ;ICH-LR-HR.C: 206: }
  4148                           ;ICH-LR-HR.C: 207: if (!Key_LED.oneBit.PRClose || !led_enable){
  4149  0587  1CFB               	btfss	_Key_LED,1
  4150  0588  2D8B               	goto	i1l1922
  4151  0589  1B7A               	btfsc	_led_enable/(0+8),_led_enable& (0+7)
  4152  058A  2D8D               	goto	i1l1920
  4153  058B                     i1l1922:	
  4154                           
  4155                           ;ICH-LR-HR.C: 208: LATC4 = 0;
  4156  058B  0022               	movlb	2	; select bank2
  4157  058C  120E               	bcf	14,4
  4158  058D                     i1l1920:	
  4159                           
  4160                           ;ICH-LR-HR.C: 209: }
  4161                           ;ICH-LR-HR.C: 210: if (!Key_LED.oneBit.Heat || !led_enable || (LedPwmCount > heatLedInte
      +                          nsity)){
  4162  058D  197B               	btfsc	_Key_LED,2
  4163  058E  1F7A               	btfss	_led_enable/(0+8),_led_enable& (0+7)
  4164  058F  2D95               	goto	i1l1925
  4165  0590  087C               	movf	_LedPwmCount,w
  4166  0591  0020               	movlb	0	; select bank0
  4167  0592  0246               	subwf	_heatLedIntensity,w
  4168  0593  1803               	skipnc
  4169  0594  2D97               	goto	i1l1923
  4170  0595                     i1l1925:	
  4171                           
  4172                           ;ICH-LR-HR.C: 211: LATC6 = 0;
  4173  0595  0022               	movlb	2	; select bank2
  4174  0596  130E               	bcf	14,6
  4175  0597                     i1l1923:	
  4176                           
  4177                           ;ICH-LR-HR.C: 212: }
  4178                           ;ICH-LR-HR.C: 213: if (!Key_LED.oneBit.Massage || !led_enable || (LedPwmCount > massageL
      +                          edIntensity)){
  4179  0597  19FB               	btfsc	_Key_LED,3
  4180  0598  1F7A               	btfss	_led_enable/(0+8),_led_enable& (0+7)
  4181  0599  2D9F               	goto	i1l1928
  4182  059A  087C               	movf	_LedPwmCount,w
  4183  059B  0020               	movlb	0	; select bank0
  4184  059C  024C               	subwf	_massageLedIntensity,w
  4185  059D  1803               	skipnc
  4186  059E  2DA1               	goto	i1l1926
  4187  059F                     i1l1928:	
  4188                           
  4189                           ;ICH-LR-HR.C: 214: LATC5 = 0;
  4190  059F  0022               	movlb	2	; select bank2
  4191  05A0  128E               	bcf	14,5
  4192  05A1                     i1l1926:	
  4193                           
  4194                           ;ICH-LR-HR.C: 215: }
  4195                           ;ICH-LR-HR.C: 216: if (!Key_LED.oneBit.Light || !led_enable){
  4196  05A1  1E7B               	btfss	_Key_LED,4
  4197  05A2  2DA5               	goto	i1l1931
  4198  05A3  1B7A               	btfsc	_led_enable/(0+8),_led_enable& (0+7)
  4199  05A4  0008               	return
  4200  05A5                     i1l1931:	
  4201                           
  4202                           ;ICH-LR-HR.C: 217: LATC3 = 0;
  4203  05A5  0022               	movlb	2	; select bank2
  4204  05A6  118E               	bcf	14,3
  4205  05A7  0008               	return
  4206  05A8                     __end_of_IchLeds:	
  4207                           
  4208                           	psect	text617
  4209  05A8                     __ptext617:	
  4210 ;; =============== function _IchLeds ends ============
  4211                           
  4212                           
  4213 ;; *************** function _IchOutputs *****************
  4214 ;; Defined at:
  4215 ;;		line 133 in file "ICH-LR-HR.C"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;		None               void
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 1D/0
  4226 ;;		On exit  : 1F/2
  4227 ;;		Unchanged: FFFE0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4229 ;;      Params:         0       0       0       0
  4230 ;;      Locals:         0       0       0       0
  4231 ;;      Temps:          0       0       0       0
  4232 ;;      Totals:         0       0       0       0
  4233 ;;Total ram usage:        0 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_ISR
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241  05A8                     _IchOutputs:	
  4242                           
  4243                           ;ICH-LR-HR.C: 135: outputPwmCount++;
  4244                           
  4245                           ; Regs used in _IchOutputs: [wreg+status,2+status,0]
  4246  05A8  0020               	movlb	0	; select bank0
  4247  05A9  3014               	movlw	20
  4248  05AA  0ACE               	incf	_outputPwmCount,f
  4249                           
  4250                           ;ICH-LR-HR.C: 136: if (outputPwmCount >= 20){
  4251  05AB  024E               	subwf	_outputPwmCount,w
  4252  05AC  1803               	btfsc	3,0
  4253                           
  4254                           ;ICH-LR-HR.C: 137: outputPwmCount = 0;
  4255  05AD  01CE               	clrf	_outputPwmCount
  4256                           
  4257                           ;ICH-LR-HR.C: 138: }
  4258                           ;ICH-LR-HR.C: 142: if(Key_LED.oneBit.Massage && (outputPwmCount <= massageIntensity)){
  4259  05AE  1DFB               	btfss	_Key_LED,3
  4260  05AF  2DB7               	goto	i1l1897
  4261  05B0  084E               	movf	_outputPwmCount,w
  4262  05B1  024B               	subwf	_massageIntensity,w
  4263  05B2  1C03               	skipc
  4264  05B3  2DB7               	goto	i1l1897
  4265                           
  4266                           ;ICH-LR-HR.C: 143: LATC1 = 1;
  4267  05B4  0022               	movlb	2	; select bank2
  4268  05B5  148E               	bsf	14,1
  4269                           
  4270                           ;ICH-LR-HR.C: 144: }else{
  4271  05B6  2DB9               	goto	i1l1898
  4272  05B7                     i1l1897:	
  4273                           
  4274                           ;ICH-LR-HR.C: 145: LATC1 = 0;
  4275  05B7  0022               	movlb	2	; select bank2
  4276  05B8  108E               	bcf	14,1
  4277  05B9                     i1l1898:	
  4278                           
  4279                           ;ICH-LR-HR.C: 146: }
  4280                           ;ICH-LR-HR.C: 150: if(Key_LED.oneBit.Heat && !(LATA7 || LATA6) && (outputPwmCount <= hea
      +                          tIntensity)){
  4281  05B9  197B               	btfsc	_Key_LED,2
  4282  05BA  1B8C               	btfsc	12,7
  4283  05BB  2DC6               	goto	i1l1899
  4284  05BC  1B0C               	btfsc	12,6
  4285  05BD  2DC6               	goto	i1l1899
  4286  05BE  0020               	movlb	0	; select bank0
  4287  05BF  084E               	movf	_outputPwmCount,w
  4288  05C0  0245               	subwf	_heatIntensity,w
  4289  05C1  1C03               	skipc
  4290  05C2  2DC6               	goto	i1l1899
  4291                           
  4292                           ;ICH-LR-HR.C: 151: LATC0 = 1;
  4293  05C3  0022               	movlb	2	; select bank2
  4294  05C4  140E               	bsf	14,0
  4295                           
  4296                           ;ICH-LR-HR.C: 152: }else{
  4297  05C5  2DC8               	goto	i1l1900
  4298  05C6                     i1l1899:	
  4299                           
  4300                           ;ICH-LR-HR.C: 153: LATC0 = 0;
  4301  05C6  0022               	movlb	2	; select bank2
  4302  05C7  100E               	bcf	14,0
  4303  05C8                     i1l1900:	
  4304                           
  4305                           ;ICH-LR-HR.C: 154: }
  4306                           ;ICH-LR-HR.C: 157: if (Key_LED.oneBit.PROpen){
  4307  05C8  1C7B               	btfss	_Key_LED,0
  4308  05C9  2DD8               	goto	i1l1902
  4309                           
  4310                           ;ICH-LR-HR.C: 158: LATA6 = 0;
  4311  05CA  130C               	bcf	12,6
  4312                           
  4313                           ;ICH-LR-HR.C: 159: if(!prOpenDelay){
  4314  05CB  0020               	movlb	0	; select bank0
  4315  05CC  0841               	movf	_prOpenDelay+1,w
  4316  05CD  0440               	iorwf	_prOpenDelay,w
  4317  05CE  1D03               	skipz
  4318  05CF  2DD8               	goto	i1l1902
  4319                           
  4320                           ;ICH-LR-HR.C: 160: LATA7 = 1;
  4321  05D0  0022               	movlb	2	; select bank2
  4322  05D1  30E8               	movlw	232
  4323  05D2  178C               	bsf	12,7
  4324                           
  4325                           ;ICH-LR-HR.C: 161: prCloseDelay = 10050/8;
  4326  05D3  0020               	movlb	0	; select bank0
  4327  05D4  00BE               	movwf	_prCloseDelay
  4328  05D5  3004               	movlw	4
  4329  05D6  00BF               	movwf	_prCloseDelay+1
  4330                           
  4331                           ;ICH-LR-HR.C: 162: }else{
  4332  05D7  2DDA               	goto	i1l1904
  4333  05D8                     i1l1902:	
  4334                           
  4335                           ;ICH-LR-HR.C: 163: LATA7 = 0;
  4336  05D8  0022               	movlb	2	; select bank2
  4337  05D9  138C               	bcf	12,7
  4338  05DA                     i1l1904:	
  4339                           
  4340                           ;ICH-LR-HR.C: 167: }
  4341                           ;ICH-LR-HR.C: 170: if (Key_LED.oneBit.PRClose){
  4342  05DA  1CFB               	btfss	_Key_LED,1
  4343  05DB  2DEB               	goto	i1l1906
  4344                           
  4345                           ;ICH-LR-HR.C: 171: LATA7 = 0;
  4346  05DC  0022               	movlb	2	; select bank2
  4347  05DD  138C               	bcf	12,7
  4348                           
  4349                           ;ICH-LR-HR.C: 172: if(!prCloseDelay){
  4350  05DE  0020               	movlb	0	; select bank0
  4351  05DF  083F               	movf	_prCloseDelay+1,w
  4352  05E0  043E               	iorwf	_prCloseDelay,w
  4353  05E1  1D03               	skipz
  4354  05E2  2DEB               	goto	i1l1906
  4355                           
  4356                           ;ICH-LR-HR.C: 173: LATA6 = 1;
  4357  05E3  0022               	movlb	2	; select bank2
  4358  05E4  30E8               	movlw	232
  4359  05E5  170C               	bsf	12,6
  4360                           
  4361                           ;ICH-LR-HR.C: 174: prOpenDelay = 10050/8;
  4362  05E6  0020               	movlb	0	; select bank0
  4363  05E7  00C0               	movwf	_prOpenDelay
  4364  05E8  3004               	movlw	4
  4365  05E9  00C1               	movwf	_prOpenDelay+1
  4366                           
  4367                           ;ICH-LR-HR.C: 175: }else{
  4368  05EA  2DED               	goto	i1l1908
  4369  05EB                     i1l1906:	
  4370                           
  4371                           ;ICH-LR-HR.C: 176: LATA6 = 0;
  4372  05EB  0022               	movlb	2	; select bank2
  4373  05EC  130C               	bcf	12,6
  4374  05ED                     i1l1908:	
  4375                           
  4376                           ;ICH-LR-HR.C: 181: }
  4377                           ;ICH-LR-HR.C: 186: if (Key_LED.oneBit.Light){
  4378  05ED  1E7B               	btfss	_Key_LED,4
  4379  05EE  2DF2               	goto	i1l1909
  4380                           
  4381                           ;ICH-LR-HR.C: 187: LATC2 = 1;
  4382  05EF  0022               	movlb	2	; select bank2
  4383  05F0  150E               	bsf	14,2
  4384                           
  4385                           ;ICH-LR-HR.C: 188: }else{
  4386  05F1  0008               	return
  4387  05F2                     i1l1909:	
  4388                           
  4389                           ;ICH-LR-HR.C: 189: LATC2 = 0;
  4390  05F2  0022               	movlb	2	; select bank2
  4391  05F3  110E               	bcf	14,2
  4392  05F4  0008               	return
  4393  05F5                     __end_of_IchOutputs:	
  4394                           
  4395 ;; =============== function _IchOutputs ends ============
  4396  0014                     
  4397                           	psect	functab
  4398  0100                     __pfunctab:	
  4399  0100                     fptable:	
  4400  0100  2900               	goto	fptable	;no entries
  4401  0101                     i1fptable:	
  4402  0101  3181               	movlp	high i1fptable
  4403  0102  0782               	addwf	2,f
  4404  0103                     i1fpbase:	
  4405  0103  2903               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  4406  0104                     fp__mTouch_ScanA_4:	
  4407  0104  3187  2F1E         	ljmp	_mTouch_ScanA_4
  4408  0106                     fp__mTouch_ScanA_0:	
  4409  0106  3186  2EFD         	ljmp	_mTouch_ScanA_0
  4410  0108                     fp__mTouch_ScanA_1:	
  4411  0108  3186  2EDC         	ljmp	_mTouch_ScanA_1
  4412  010A                     fp__mTouch_ScanA_2:	
  4413  010A  3186  2EBB         	ljmp	_mTouch_ScanA_2
  4414  010C                     fp__mTouch_ScanA_3:	
  4415  010C  3186  2E9A         	ljmp	_mTouch_ScanA_3
  4416  010E                     fp__mTouch_ScanB_4:	
  4417  010E  3186  2E79         	ljmp	_mTouch_ScanB_4
  4418  0110                     fp__mTouch_ScanB_0:	
  4419  0110  3186  2E58         	ljmp	_mTouch_ScanB_0
  4420  0112                     fp__mTouch_ScanB_1:	
  4421  0112  3186  2E37         	ljmp	_mTouch_ScanB_1
  4422  0114                     fp__mTouch_ScanB_2:	
  4423  0114  3186  2E16         	ljmp	_mTouch_ScanB_2
  4424  0116                     fp__mTouch_ScanB_3:	
  4425  0116  3185  2DF5         	ljmp	_mTouch_ScanB_3
  4426  007E                     btemp	set	126	;btemp
  4427  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Dec 29 15:34:43 2020

                                 pc 0002                      ___bmul@product 0050  
        __size_of_mTouch_StoreScanA 000C          __size_of_mTouch_StoreScanB 000E  
              _mTouch_WaitForGoDone 04AA                                 LATB 010D  
                               TMR0 0015                                 _ISR 0004  
                               wreg 0009                   _mTouch_sensorData 002A  
                              INDF0 0000                                INDF1 0001  
                              FSR0H 0005                                FSR1H 0007  
                              FSR0L 0004                                FSR1L 0006  
                              ?_ISR 0070                                l1860 0178  
                              l1861 0180                                l1870 01B6  
                              l1862 0192                                l1863 0187  
                              l1865 0189                                l1866 0190  
                              l1878 01B7                                l1879 01DF  
                              l1888 01E0                                l1889 01F4  
                              TRISB 008D                                l9203 0383  
                              l9221 02C3                                l9191 0000  
                              l9197 0000                                _T0IF 005A  
                              u1815 02AE                                u1755 03AC  
                              u1835 02F5                                u1785 03D1  
                              _main 0130                                fsr0h 0005  
                              fsr1h 0007                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                              start 006C                     __end_of_IchLeds 05A8  
             ??i1_mTouch_ChangeMode 0070          ?_mTouch_ButtonStateMachine 0070  
                 ___bmul@multiplier 0051                          _IchOutputs 05A8  
                             ADCON0 009D                               ??_ISR 0079  
             ?_mTouch_WaitForGoDone 0070                               l11121 0000  
                             l20310 016A                               l20302 0146  
                             l20304 014F                               l20306 0158  
                             l20308 0161                               l20317 0000  
                             l22007 0000                               l23200 0000  
                             l23220 0000                               l23204 0000  
                             l23212 01AE                               l23230 01CC  
                             l23222 0000                               l23206 01A6  
                             l23232 01CF                               l23208 01AA  
                             l23312 0000                               l23242 0000  
                             l23226 0000                               l23218 0000  
                             l23170 0000                               l23314 0000  
                             l23244 0000                               l23228 01C8  
                             l23236 01D4                               l23172 0000  
                             l23174 0000                               l23246 01F6  
                             l23440 0000                               l23432 0000  
                             l23512 0000                               l23504 0000  
                             l23600 0000                               l23450 0000  
                             l23442 0000                               l23434 0000  
                             l23514 0000                               l23506 0339  
                             l23602 0395                               l23196 0000  
                             l23452 0000                               l23444 0000  
                             l23436 0000                               l23540 0000  
                             l23620 0000                               l23604 0397  
                             l23700 013A                               l23198 0000  
                             l23454 0000                               l23446 0000  
                             l23438 0000                               l23550 0000  
                             l23622 0000                               l23710 0147  
                             l23448 0000                               l23560 0000  
                             l23552 0000                               l23624 0000  
                             l23616 03B7                               l23608 0000  
                             l23704 0000                               l23570 0000  
                             l23562 0000                               l23554 0000  
                             l23546 0229                               l23722 0162  
                             l23714 0150                               l23706 0000  
                             l23572 0000                               l23564 0000  
                             l23556 0000                               l23548 0000  
                             l23628 03C7                               l23580 0000  
                             l23652 0000                               l23574 0000  
                             l23566 0000                               l23558 0000  
                             l23590 03A0                               l23646 03EA  
                             l23582 0000                               l23670 0000  
                             l23662 0000                               l23654 0000  
                             l23718 0159                               l23726 016B  
                             l23576 0000                               l23568 0000  
                             l23680 034F                               l23672 0000  
                             l23594 03A1                               l23586 0379  
                             l23578 0000                               l23682 0000  
                             l23674 0000                               l23690 0000  
                             l23668 0000                               l23676 0348  
                             l23692 0000                               l23686 0000  
                             l23694 0000                               l23688 0000  
                             l23696 0000                               l23698 0000  
                             STATUS 0003                               ?_main 0070  
                             _T2CON 001C                               _LATC0 0870  
                             _LATC1 0871                               _LATC2 0872  
                             _LATA6 0866                               _LATC3 0873  
                             _LATA7 0867                               _LATC4 0874  
                             _LATC5 0875                               _LATB7 086F  
                             _LATC6 0876                               _PORTA 000C  
                             _PORTB 000D                               _PORTC 000E  
                             _PORTE 0010                               _TRISA 008C  
                             _TRISB 008D                               _TRISC 008E  
                             _TRISE 0090                               fpbase 0000  
                    __pbitbssCOMMON 03D0                          _KeyExecute 016E  
                             wtemp0 007E            ?_mTouch_DecimationFilter 0070  
                   _flag_led_enable 03D1                        __end_of_main 016E  
                            ??_main 005B                __size_of_mTouch_Init 005C  
                            _ADRESH 009C                              _ADRESL 009B  
              __size_of_mTouch_Scan 0050                              _ANSELA 018C  
                            _ANSELB 018D                              i1l1900 05C8  
                            i1l1902 05D8                              i1l1904 05DA  
                            i1l1920 058D                              u130_20 0577  
                            i1l1906 05EB                              i1l1922 058B  
                            i1l1931 05A5                              i1l1923 0597  
                            i1l1915 0581                              i1l1908 05ED  
                            u130_24 0572                              i1l1909 05F2  
                            i1l1925 0595                              i1l1917 0587  
                            i1l1926 05A1                              i1l1919 0585  
                            i1l1928 059F                              u131_20 057E  
                            u131_24 0579                              i1l1897 05B7  
                            i1l1898 05B9                              i1l1899 05C6  
                            u150_25 04E8             _mTouch_releaseThreshold 007A  
                            u128_20 0569                              u152_25 0501  
                            u129_20 0570                              u129_24 056B  
                            u153_25 0530                         _LedPwmCount 007C  
                         ??_IchLeds 0070                              _OSCCON 0099  
                            _TMR0IE 005D                              _TMR0IF 005A  
                            _TMR2IE 0489                              _TMR2IF 0089  
                            ___bmul 0337                         ?_IchOutputs 0070  
            ??_mTouch_WaitForGoDone 0070                              clrloop 0740  
                            fptable 0100      __size_of_mTouch_UpdateBaseline 00B5  
     __end_of_mTouch_UpdateBaseline 0337                              fptotal 0000  
                       ?_KeyExecute 0070                    _massageIntensity 004B  
               ___bmul@multiplicand 004F                      __pcstackCOMMON 0070  
                      __pidataBANK0 0000         __end_of_Example_System_Init 0226  
               __size_of_IchOutputs 004D              mTouch_Init@sensorIndex 0053  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
             __end_of_mTouch_Decode 0358                          __pmaintext 0130  
       ??_mTouch_ButtonStateMachine 0052                             ?___bmul 004F  
                        __pintentry 0004                          _flag_light 03D2  
               __size_of_KeyExecute 00A0                             i1l11104 0000  
                           i1l11121 0000                             i1l11107 04AD  
                           i1l11115 0000                             i1l11131 0000  
                           i1l11124 0000                             i1l11140 0000  
                           i1l11132 0000                             i1l11125 0000  
                           i1l11141 0000                             i1l11133 0000  
                           i1l11118 0000                             i1l11126 0000  
                           i1l11142 0000                             i1l11134 0000  
                           i1l11127 0000                             i1l11135 0000  
                           i1l11128 0000                             i1l11152 0000  
                           i1l11160 0000                             i1l11153 0000  
                           i1l11145 0000                             i1l11161 0000  
                           i1l11138 0000                             i1l11154 0000  
                           i1l11170 0000                             i1l11146 0000  
                           i1l11162 0000                             i1l11139 0000  
                           i1l11155 0000                             i1l11147 0000  
                           i1l11163 0000                             i1l11180 0000  
                           i1l11156 0000                             i1l11148 0000  
                           i1l11181 0000                             i1l11149 0000  
                           i1l11173 0000                             i1l11182 0000  
                           i1l11166 0000                             i1l11190 0000  
                           i1l11174 0000                             i1l11183 0000  
                           i1l11167 0000                             i1l11191 0000  
                           i1l11159 0000                             i1l11175 0000  
                           i1l11095 0000                             i1l11184 0000  
                           i1l11168 0000                             i1l11176 0000  
                           i1l11169 0000                             i1l11177 0000  
                           i1l20322 001B                             i1l11187 0000  
                           i1l20323 0023                             i1l11188 0000  
                           i1l20332 0061                             i1l11189 0000  
                           i1l20325 0062                             i1l20335 0068  
                           i1l23320 0000                             i1l23250 0000  
                           i1l23410 0000                             i1l23402 0508  
                           i1l23330 0000                             i1l23322 0000  
                           i1l23412 0000                             i1l23420 0000  
                           i1l23340 0000                             i1l23332 0000  
                           i1l23324 0000                             i1l23316 0000  
                           i1l23270 0000                             i1l23406 050C  
                           i1l23430 0000                             i1l23414 0000  
                           i1l23422 0000                             i1l23350 0000  
                           i1l23342 0000                             i1l23334 0000  
                           i1l23326 0000                             i1l23318 0000  
                           i1l23502 0067                             i1l23248 0000  
                           i1l23408 0000                             i1l23416 0000  
                           i1l23424 0000                             i1l23360 0000  
                           i1l23344 047D                             i1l23336 0000  
                           i1l23328 0000                             i1l23282 0000  
                           i1l23274 0000                             i1l23418 0000  
                           i1l23426 0000                             i1l23370 0000  
                           i1l23362 0000                             i1l23354 0000  
                           i1l23346 0000                             i1l23380 0000  
                           i1l23428 0000                             i1l23372 0000  
                           i1l23364 0000                             i1l23348 0000  
                           i1l23356 049E                             i1l23278 0000  
                           i1l23286 0000                             i1l23390 0000  
                           i1l23374 0000                             i1l23366 0000  
                           i1l23358 0000                             i1l23470 002C  
                           i1l23462 0000                             i1l23288 0000  
                           i1l23384 0000                             i1l23392 0000  
                           i1l23536 0000                             i1l23376 0000  
                           i1l23368 0000                             i1l23456 0000  
                           i1l23386 0000                             i1l23538 0000  
                           i1l23490 0000                             i1l23482 0000  
                           i1l23474 0000                             i1l23396 04EF  
                           i1l23388 0000                             i1l23494 0058  
                           i1l23486 004A                             i1l23478 003C  
                mTouch_Init@acqData 0052                          _led_enable 03D6  
                        __stringtab 006F                             _IchLeds 0558  
       __end_ofi1_mTouch_ChangeMode 054B                             i1fpbase 0103  
                    _outputPwmCount 004E                             _Key_LED 007B  
           __size_of_mTouch_ScanA_0 0021             __size_of_mTouch_ScanA_1 0021  
           __size_of_mTouch_ScanA_2 0021             __size_of_mTouch_ScanA_3 0021  
           __size_of_mTouch_ScanA_4 0021             __size_of_mTouch_ScanB_0 0021  
           __size_of_mTouch_ScanB_1 0021             __size_of_mTouch_ScanB_2 0021  
           __size_of_mTouch_ScanB_3 0021             __size_of_mTouch_ScanB_4 0021  
                 fp__mTouch_ScanA_0 0106                   fp__mTouch_ScanA_1 0108  
                 fp__mTouch_ScanA_2 010A                   fp__mTouch_ScanA_3 010C  
                 fp__mTouch_ScanB_0 0110                   fp__mTouch_ScanA_4 0104  
                 fp__mTouch_ScanB_1 0112                   fp__mTouch_ScanB_2 0114  
                 fp__mTouch_ScanB_3 0116                   fp__mTouch_ScanB_4 010E  
                      _mTouch_ScanA 0084                        _mTouch_ScanB 0089  
                      _flag_massage 03D3                        _flag_pr_open 03D5  
                   __size_of___bmul 000C                          _lightTimer 0038  
                      _mTouch_state 004A                        __size_of_ISR 0068  
  __size_of_mTouch_DecimationFilter 0077           _mTouch_ButtonStateMachine 035E  
              end_of_initialization 012E        mTouch_UpdateBaseline@reading 0059  
                      ??_IchOutputs 0070                          mTouch_Scan 045A  
                     ??_mTouch_Init 0052                       ??_mTouch_Scan 0077  
                  _heatLedIntensity 0046                  __end_of_IchOutputs 05F5  
                      ??_KeyExecute 004F                    _mTouch_stateVars 00A0  
             _mTouch_currentAcqData 007D                      __end_of___bmul 0343  
     __size_of_mTouch_WaitForGoDone 000A                  __end_of_KeyExecute 020E  
               start_initialization 0118                         __end_of_ISR 006C  
             _mTouch_UpdateBaseline 0282                           _Key_state 0044  
               __end_of_mTouch_Init 0282                 __end_of_mTouch_Scan 04AA  
                    _mTouch_ScanA_0 06FD                      _mTouch_ScanA_1 06DC  
                    _mTouch_ScanA_2 06BB                      _mTouch_ScanA_3 069A  
                    _mTouch_ScanB_0 0658                      _mTouch_ScanA_4 071E  
                    _mTouch_ScanB_1 0637                      _mTouch_ScanB_2 0616  
                    _mTouch_ScanB_3 05F5                      _mTouch_ScanB_4 0679  
                 _mTouch_ChangeMode 0358                            ??___bmul 0050  
                    _mTouch_acqData 00BA                  ?_mTouch_ChangeMode 0070  
                       __pdataBANK0 005C                      _mTouch_average 0020  
           _mTouch_DecimationFilter 04CE                 ??_mTouch_ChangeMode 004F  
                       __pbssCOMMON 007B                       __pcstackBANK0 004F  
                      _prCloseDelay 003E                        _massageTimer 003C  
                      _massageState 004D              __end_of_mTouch_ScanA_0 071E  
            __end_of_mTouch_ScanA_1 06FD              __end_of_mTouch_ScanA_2 06DC  
            __end_of_mTouch_ScanA_3 06BB              __end_of_mTouch_ScanA_4 073F  
            __end_of_mTouch_ScanB_0 0679              __end_of_mTouch_ScanB_1 0658  
            __end_of_mTouch_ScanB_2 0637              __end_of_mTouch_ScanB_3 0616  
            __end_of_mTouch_ScanB_4 069A                            ?_IchLeds 0070  
__size_of_mTouch_ButtonStateMachine 0099        __size_of_Example_System_Init 0018  
         __end_of_mTouch_ChangeMode 035E                           __pfunctab 0100  
                         _heatTimer 0034                           _heatState 0047  
                         _flag_heat 03D0                           __ptext600 045A  
                         __ptext601 0545                           __ptext610 06FD  
                         __ptext602 05F5                           __ptext611 071E  
                         __ptext603 0616                           __ptext612 04CE  
                         __ptext604 0637                           __ptext613 04C0  
                         __ptext605 0658                           __ptext614 04B4  
                         __ptext606 0679                           __ptext615 04AA  
                         __ptext607 069A                           __ptext616 0558  
                         __ptext608 06BB                           __ptext617 05A8  
                         __ptext609 06DC                           __ptext591 0343  
                         __ptext592 0282                           __ptext593 035E  
                         __ptext594 0226                           __ptext595 0337  
                         __ptext596 020E                           __ptext597 0358  
                         __ptext598 016E                           __pstrings 006F  
            __size_of_mTouch_Decode 0015              ?_mTouch_UpdateBaseline 0070  
                       _mTouch_Init 0226                         _mTouch_Scan 045A  
                   ?_mTouch_ScanA_0 0070                     ?_mTouch_ScanA_1 0070  
                   ?_mTouch_ScanA_2 0070                     ?_mTouch_ScanA_3 0070  
                   ?_mTouch_ScanB_0 0070                     ?_mTouch_ScanA_4 0070  
                   ?_mTouch_ScanB_1 0070                     ?_mTouch_ScanB_2 0070  
                   ?_mTouch_ScanB_3 0070                     ?_mTouch_ScanB_4 0070  
             _mTouch_pressThreshold 0070                 _massageLedIntensity 004C  
 __end_of_mTouch_ButtonStateMachine 03F7                       _heatIntensity 0045  
      __size_ofi1_mTouch_ChangeMode 0006                            _GO_nDONE 04E9  
         ??_mTouch_DecimationFilter 0070       mTouch_DecimationFilter@result 0075  
                        _ADCON1bits 009E                            i1fptable 0101  
                          i1fptotal 0014                    __size_of_IchLeds 0050  
                     _mTouch_Decode 0343          __size_of_mTouch_ChangeMode 0006  
                     _flag_pr_close 03D4                       _mTouch_jitter 005C  
                 _mTouch_StoreScanA 04B4                   _mTouch_StoreScanB 04C0  
                ?_mTouch_StoreScanA 0070                  ?_mTouch_StoreScanB 0070  
                          _ledTimer 0036                 ??_mTouch_StoreScanA 0070  
               ??_mTouch_StoreScanB 0070        __end_of_mTouch_WaitForGoDone 04B4  
   __end_of_mTouch_DecimationFilter 0545                      ?_mTouch_Decode 0070  
                     __size_of_main 003E                         _prOpenDelay 0040  
                          clear_ram 073F           __end_of_mTouch_StoreScanA 04C0  
         __end_of_mTouch_StoreScanB 04CE                   _mTouch_delayCount 0049  
                       _secondTimer 0042                 _Example_System_Init 020E  
                        _INTCONbits 000B     mTouch_ButtonStateMachine@sensor 0056  
                          intlevel1 0100                ?_Example_System_Init 0070  
                _mTouch_currentScan 0048      mTouch_ButtonStateMachine@delta 0054  
           ??_mTouch_UpdateBaseline 0052                          _OPTION_REG 0095  
                 _mTouch_lastResult 003A                    ??_mTouch_ScanA_0 0070  
                      ?_mTouch_Init 0070                    ??_mTouch_ScanA_1 0070  
                  ??_mTouch_ScanA_2 0070                    ??_mTouch_ScanA_3 0070  
                  ??_mTouch_ScanB_0 0070                    ??_mTouch_ScanA_4 0070  
                  ??_mTouch_ScanB_1 0070                    ??_mTouch_ScanB_2 0070  
                  ??_mTouch_ScanB_3 0070                    ??_mTouch_ScanB_4 0070  
                      ?_mTouch_Scan 0070                 i1_mTouch_ChangeMode 0545  
                   ??_mTouch_Decode 005B               ??_Example_System_Init 004F  
              ?i1_mTouch_ChangeMode 0070  
